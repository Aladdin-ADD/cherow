import * as assert from 'clean-assert';
import * as t from 'assert';
// import { ValidatorState, validateRegExp } from '../../../../src/regexp';
import { Context } from '../../../../src/utilities';
import * as ESTree from '../../../../src/estree';


describe.skip('Regular expressions', () => {
    
    describe('Failure', () => {
        const invalidUnicodeSyntax = [
            "/[\\u0000-\\S]/u",
            "/[\\u0000-\\s]/u",
            "/[\\u0000-\\D]/u",
            "/[0-9--+]/u",
            "/[🌷-🌸]/",
            "/[🌸-🌷]/",
            "/[🌸-🌷]/u",
            "/[🌸-🌷]/u",
            "/[🌷-🌸]/",
            "/[\\u12]/u",
            "/[\\u{2}-\\u{1}]/u",
            "/[\\u0001-\\u0000]/u",
            "/[\\c_]/u",
            "/[\\c0-]/u",
            "/[\\c-a]/u",
            "/[0-9--+]/u",
            "/[\\z-\\a]/u",
            "/[\\a-\\z]/u",
            '/(?<$𐒤>a)/u',
            '/\\c/u',
            '/\\u/u',
            '/\\u/u',
            "/\\400/u",
            "/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/u",
            "/(?:a)\\2/u",
            "/(a)\\2/u",
            "/(?:a)\\1/u",
            "/\\1/u",
            '/(a)\\2/u',
             "/[\\u{2-\\u{1}]/u",
            "/[\\u{2}-\\u{1}]/u",
            "/[\\u0001-\\u0000]/u",
            "/[\\s-\\uFFFF]/u",
            "/[\\D-\\uFFFF]/u",
            "/[\\77]/u",
            "/[\\u{110000}]/u",
            "/[\\u{z]/u",
            "/[\\u{]/u",
            "/[\\u]/u",
            "/[\\u1]/u",
            "/[\\u]/u",
            "/[\\x1]/u",
            "/[\\xz]/u",
            "/[\\x]/u",
            "/[\\c]/u",
            "/[\\c1]/u",
            "/[b-a]/u",
            "/\\a/u",
            "/\\u{110000}/u",
            "/\\u{20/u",
            "/\\u{z/u",
            "/\\u123/u",
            "/\\u12/u",
            "/\\u/u",
            "/\\u1/u",
            "/\\c1/u",
            "/(?:a/u",
            "/(?:/u",
            "/(?a)/u",
            "/(?a)/u",
            "/(?/u",
            "/\\2(a)(/u",
            "/${2,1}/u",
            "/${1,2}/u",
            "/${1,2}/u",
            "/${2,1}/u",
            "/$*/u",
            "/^*/u",
            "/}/u",
            "/{/u",
            "/]/u",
            "/)/u",
            "/(/u",
            "/a{2,1}?/u",
            "/a{2,1?/u",
            "/a{1,2?/u",
            "/a{1,?/u",
            "/a{1?/u",
            "/a{a}?/u",
            "/a{?/u",
            "/(a{2,1}/u",
            "/a{2,1/u",
            "/a{2,1}/u",
            "/a{1,/u",
            "/a{a}/u",
            "/a{}/u",
            "/a{/u",
            "/(?=a){1,2}/u",
            "/(?=a){1,}/u",
            "/(?=a){1}/u",
            "/(?=a){}/u",
            "/(?=a){/u",
            "/(?!foo/u",
            "/(?!/u",
            "/(?=/u",
            "/(?/u",
            "/(/u",
            "/[🌷-🌸]/u",
            "/[\\u0000-\\W]/u",
            "/[\\u0000-\\w]/u",
            "/[\\w-\\uFFFF]/u",
            "/[\\W-\\uFFFF]/u",
            "/[\\w-\\uFFFF]/u",
    
        ]
    
        for (const arg of invalidUnicodeSyntax) {
    
            it(`${arg}`, () => {
    
                t.throws(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }
    });

    describe('Pass', () => {

        const validSyntaxWithUnicodeFlag = [
            '/${1,2/u',
            "/foo/u",
            "/foo|bar/u",
            "/||||/u",
            "/^|$|\\b|\\B/u",
            "/(?=)/u",
            "/(?=foo)/u",
            "/(?!)/u",
            "/(?!foo)/u",
            "/a*/u",
            "/a+/u",
            "/a?/u",
            "/a{1}/u",
            "/a{1,}/u",
            "/a{1,2}/u",
            "/a*?/u",
            "/a+?/u",
            "/a??/u",
            "/a{1}?/u",
            "/a{1,}?/u",
            "/a{1,2}?/u",
            "/👍🚀❇️/u",
            "/?/u",
            "/+/u",
            "/^/u",
            "/$/u",
            "/./u",
            "/|/u",
            "/(a)\\1/u",
            "/\\1(a)/u",
            "/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/u",
            "/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\10/u",
            "/(?:a)/u",
            "/\\d/u",
            "/\\D/u",
            "/\\s/u",
            "/\\S/u",
            "/\\w/u",
            "/\\W/u",
            "/\\f/u",
            "/\\n/u",
            "/\\r/u",
            "/\\t/u",
            "/\\v/u",
            "/\\cA/u",
            "/\\cz/u",
            "/\\0/u",
            "/\\u1234/u",
            "/\\u{a}/u",
            "/\\u{20}/u",
            "/\\u{00000001}/u",
            "/\\u{10FFFF}/u",
            "/\\^/u",
            "/\\$/u",
            "/\\./u",
            "/\\+/u",
            "/\\?/u",
            "/\\(/u",
            "/\\)/u",
            "/\\[/u",
            "/\\]/u",
            "/\\{/u",
            "/\\}/u",
            "/\\|/u",
            "/\\//u",
            "/\\s/u",
            "/[]/u",
            "/[^-a-b-]/u",
            "/[-]/u",
            "/[a]/u",
            "/[--]/u",
            "/[-a]/u",
            "/[-a-]/u",
            "/[a-]/u",
            "/[a-b]/u",
            "/[-a-b-]/u",
            "/[---]/u",
            "/[a-b--/]/u",
            "/[\\b-\\n]/u",
            "/[b\\-a]/u",
            "/[\\d]/u",
            "/[\\D]/u",
            "/[\\s]/u",
            "/[\\S]/u",
            "/[\\w]/u",
            "/[\\W]/u",
            "/[\\d]/u",
            "/[\\D]/u",
            "/[\\s]/u",
            "/[\\S]/u",
            "/[\\S]/u",
            "/[\\w]/u",
            "/[\\W]/u",
            "/[\\f]/u",
            "/[\\n]/u",
            "/[\\r]/u",
            "/[\\t]/u",
            "/[\\v]/u",
            "/[\\cA]/u",
            "/[\\cz]/u",
            "/[\\0]/u",
            "/[\\x12]/u",
            "/[\\u1234]/u",
            "/[\\u12345]/u",
            "/[\\u{a}]/u",
            "/[\\u{20}]/u",
            "/[\\u{10FFFF}]/u",
            "/[\\u{00000001}]/u",
            "/[\\^]/u",
            "/[\\$]/u",
            "/[\\.]/u",
            "/[\\+]/u",
            "/[\\?]/u",
            "/[\\(]/u",
            "/[\\)]/u",
            "/[\\[]/u",
            "/[\\]]/u",
            "/[\\{]/u",
            "/[\\}]/u",
            "/[\\|]/u",
            "/[\\/]/u",
            "/[\\s]/u",
            "/^[0-9]*$/u",
            "/^[0-9]+$/u",
            "/^[a-zA-Z]*$/u",
            "/^[a-zA-Z]+$/u",
            "/^[a-zA-Z0-9!-/:-@\\[-`{-~]*$/u",
            "/^([0-9]{0,8})$/u",
            "/^https?:\\/\\//u",
            "/^\\d{3}-\\d{4}$/u",
            "/^\\d{1,3}(.\\d{1,3}){3}$/u",
            "/^([1-9][0-9]*|0)(\\.[0-9]+)?$/u",
            "/^-?([1-9][0-9]*|0)(\\.[0-9]+)?$/u",
            "/^[ぁ-んー]*$/u",
            "/^[ァ-ンヴー]*$/u",
            "/^[ｧ-ﾝﾞﾟ\\-]*$/u",
            "/^[^\\x20-\\x7e]*$/u",
            "/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/u",
            "/^\\s*|\\s*$/u",
        ]
    
        for (const arg of validSyntaxWithUnicodeFlag) {
    
            it(`${arg}`, () => {
    
                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }
    });


})