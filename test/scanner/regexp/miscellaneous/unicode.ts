import * as assert from 'clean-assert';
import * as t from 'assert';
import { ValidatorState, validateRegExp } from '../../../../src/regexp';
import { Context } from '../../../../src/utilities';
import * as ESTree from '../../../../src/estree';

describe.skip('Regular expressions', () => {

    describe.skip('Failure', () => {

        const invalidEscapes = [
            '/\\u/u',
            '/\\u12/u',
            '/\\ufoo/u',
            '/\\x/u',
            '/\\xfoo/u',
            '/\\z/u',
            '/\\8/u',
            '/\\9/u',
            '/\u{66}|\u{000062})oo/u'
        ];

        for (const arg of invalidEscapes) {

            it(`${arg}`, () => {

                t.throws(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }
        const invaidSyntax = [
            '/[\\u0000-\\S]/u',
            '/[\\u0000-\\s]/u',
            '/[\\u0000-\\D]/u',
            '/[0-9--+]/u',
            '/[üå∑-üå∏]/',
            '/[üå∏-üå∑]/',
            '/[üå∏-üå∑]/u',
            '/[üå∏-üå∑]/u',
            '/[üå∑-üå∏]/',
            '/[\\u12]/u',
            '/[\\u{2}-\\u{1}]/u',
            '/[\\u0001-\\u0000]/u',
            '/[\\c_]/u',
            '/[\\c0-]/u',
            '/[\\c-a]/u',
            '/[0-9--+]/u',
            '/[\\z-\\a]/u',
            '/[\\a-\\z]/u',
            '/(?<$êí§>a)/u',
            '/\\c/u',
            '/\\u/u',
            '/\\u/u',
            '/\\400/u',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/u',
            '/(?:a)\\2/u',
            '/(a)\\2/u',
            '/(?:a)\\1/u',
            '/\\1/u',
            '/(a)\\2/u',
            '/[\\u{2-\\u{1}]/u',
            '/[\\u{2}-\\u{1}]/u',
            '/[\\u0001-\\u0000]/u',
            '/[\\s-\\uFFFF]/u',
            '/[\\D-\\uFFFF]/u',
            '/[\\77]/u',
            '/[\\u{110000}]/u',
            '/[\\u{z]/u',
            '/[\\u{]/u',
            '/[\\u]/u',
            '/[\\u1]/u',
            '/[\\u]/u',
            '/[\\x1]/u',
            '/[\\xz]/u',
            '/[\\x]/u',
            '/[\\c]/u',
            '/[\\c1]/u',
            '/[b-a]/u',
            '/\\a/u',
            '/\\u{110000}/u',
            '/\\u{20/u',
            '/\\u{z/u',
            '/\\u123/u',
            '/\\u12/u',
            '/\\u/u',
            '/\\u1/u',
            '/\\c1/u',
            '/(?:a/u',
            '/(?:/u',
            '/(?a)/u',
            '/(?a)/u',
            '/(?/u',
            '/\\2(a)(/u',
            '/${2,1}/u',
            '/${1,2}/u',
            '/${1,2}/u',
            '/${2,1}/u',
            '/$*/u',
            '/^*/u',
            '/}/u',
            '/{/u',
            '/]/u',
            '/)/u',
            '/(/u',
            '/a{2,1}?/u',
            '/a{2,1?/u',
            '/a{1,2?/u',
            '/a{1,?/u',
            '/a{1?/u',
            '/a{a}?/u',
            '/a{?/u',
            '/(a{2,1}/u',
            '/a{2,1/u',
            '/a{2,1}/u',
            '/a{1,/u',
            '/a{a}/u',
            '/a{}/u',
            '/a{/u',
            '/(?=a){1,2}/u',
            '/(?=a){1,}/u',
            '/(?=a){1}/u',
            '/(?=a){}/u',
            '/(?=a){/u',
            '/(?!foo/u',
            '/(?!/u',
            '/(?=/u',
            '/(?/u',
            '/(/u',
            '/[üå∑-üå∏]/u',
            '/[\\u0000-\\W]/u',
            '/[\\u0000-\\w]/u',
            '/[\\w-\\uFFFF]/u',
            '/[\\W-\\uFFFF]/u',
            '/[\\w-\\uFFFF]/u',
            '/[üå∑-üå∏]/u',
            '/[üå∏-üå∑]/u',
            '/(?=.){1,2}/u',
            '/\\c0/u',
            '/(?=.)*/u',
            '/[\\1]/u',
            '/\\00/u',
            '/\\09/u',
            '/[\\w-a]/u',
            '/[a-\\w]/u',
            '/[\\c]/u',
            '/[\\c0]/u',
            '/a{/u',
            '/a{1,/u',
            '/{/u',
            '/}/u',
            '/]/u',
            '/[\\00]/u',
            '/[\\01]/u',
            '/[\\09]/u',
            '/\\1(?:.)/u',
            '/\\1(?<=a)./u',
            '/\\1(?<!a)./u',
            '/[\\c]/u',
            '/(?=.)*/u',
            '/\\c/u',
            '/[a-\\w]/u',
            '/(?=(foo))?/u',
            '/[\\c0]/u',
            '/a{/u',
            '/a{1,/u',
            '/{/u',
            '/}/u',
            '/]/u'
        ];

        for (const arg of invaidSyntax) {

            it(`${arg}`, () => {

                t.throws(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }
    });

    describe.skip('Pass', () => {

        const validBackRef = [
            '/([^x]+)x*\\1/',
            '/(?<=\\1(T)x)/',
            '/(?<=(.)\\2.*(T)x)/',
            '/(?<=\\1.*(L)x)/',
            '/(?<=(.)\\2.*(L)x)/',
            '/(L)\\1/',
            '/(aL).*\\1/',
            '/(aL).*\\1(.)/',
            '/(T).*\\1(.)/',
            '/([^x]+).*\\1(.)/'
        ];

        for (const arg of validBackRef) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }

        const validEscapes = [
            '/(\u0066|\u0062)oo/',
            '/(\u0066|\u0062)oo/u',
            '/(\u{0066}|\u{0062})oo/u',
            '/(\u{66}|\u{000062})oo/u',
            '/(\\u0066|\\u0062)oo/',
            '/(\\u{0066}|\\u{0062})oo/u',
            '/[\u{62}-\u{00000066}]oo/u',
            '/[\u0062-\u0066]oo/u',
            '/[\\u0062-\\u0066]oo/',
            '/[\\u0062-\\u0066]oo/u',
            '/[\\[\u{62}-\u{00000066}]oo/u',
            '/[\\[\u{0062}-\u{0066}]oo/u',
            '/[\[\u0062-\u0066]oo/u',
            '/\u{d800}\u{dc00}+/u',
            '/\ud800\u{dc00}+/u',
            '/\u{d800}\udc00+/u',
            '/(\u{66}|\u{000062})oo/u',
            '/(\u{0066}|\u{0062})oo/u',
            '/(?:(?=(foo)))?/u',

        ];

        for (const arg of validEscapes) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }

        // Character ranges
        const validRanges = [
            '/[A-D]/u',
            '/[A-D]+/u',
            '/[\u1234-\u{12345}]/u',
            '/[\u1234-\u{12345}]/u',
            '/\ud801+/u',
            '/\W\WA/u',
            '/\ud801./u',
            '/\w/u',
            '/.(?<!\ud800)X/u',
            '/.(?<![\ud800-\ud900])X/u',
            '/[^]abc/u',
            '/(?<=(\udc01\w))X/u',
        ];

        for (const arg of validRanges) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }

        const validSyntax = [
            '/${1,2/u',
            '/foo/u',
            '/foo|bar/u',
            '/||||/u',
            '/^|$|\\b|\\B/u',
            '/(?=)/u',
            '/(?=foo)/u',
            '/(?!)/u',
            '/(?!foo)/u',
            '/a*/u',
            '/[-]/u',
            '/[b-]/u',
            '/a+/u',
            '/a?/u',
            '/a{1}/u',
            '/\\1(?<a>.)/u',
            '/\\p{C}/u',
            '/\b/',
            '/\B/',
            '/a.*?(.)\b/',
            '/a.*?\B(.)/',
            '/[\\u0000-\\ud83c\\udf38-\\u0000]/u',
            '/[\\u0000-\\u{1f338}-\\u0000]/u',
            '/\u00e5\u00e5\u00e5/u',
            '/AB\u{10400}/u',
            '/a{1,}/u',
            '/a{1,2}/u',
            '/a*?/u',
            '/a+?/u',
            '/a??/u',
            '/a{1}?/u',
            '/a{1,}?/u',
            '/a{1,2}?/u',
            '/üëçüöÄ‚ùáÔ∏è/u',
            '/[a\-z]/u',
            '/[1\0a]+/u',
            '/[\W]/',
            '/[\w]/',
            '/?/u',
            '/+/u',
            '/^/u',
            '/$/u',
            '/./u',
            '/|/u',
            '/(a)\\1/u',
            '/\\1(a)/u',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/u',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\10/u',
            '/(?:a)/u',
            '/\\d/u',
            '/\\D/u',
            '/\\s/u',
            '/\\S/u',
            '/\\w/u',
            '/\\W/u',
            '/\\f/u',
            '/\\n/u',
            '/\\r/u',
            '/\\t/u',
            '/\\v/u',
            '/\\cA/u',
            '/\\cz/u',
            '/\\0/u',
            '/\\u1234/u',
            '/\\u{a}/u',
            '/\\u{20}/u',
            '/\\u{00000001}/u',
            '/\\u{10FFFF}/u',
            '/\\^/u',
            '/\\$/u',
            '/\\./u',
            '/\\+/u',
            '/\\?/u',
            '/\\(/u',
            '/\\)/u',
            '/\\[/u',
            '/\\]/u',
            '/\\{/u',
            '/\\}/u',
            '/\\|/u',
            '/\\//u',
            '/\\s/u',
            '/[]/u',
            '/[^-a-b-]/u',
            '/[-]/u',
            '/[a]/u',
            '/[--]/u',
            '/[-a]/u',
            '/[-a-]/u',
            '/[a-]/u',
            '/[a-b]/u',
            '/[-a-b-]/u',
            '/[---]/u',
            '/[a-b--/]/u',
            '/[\\b-\\n]/u',
            '/[b\\-a]/u',
            '/[\\d]/u',
            '/[\\D]/u',
            '/[\\s]/u',
            '/[\\S]/u',
            '/[\\w]/u',
            '/[\\W]/u',
            '/[\\d]/u',
            '/[\\D]/u',
            '/[\\s]/u',
            '/[\\S]/u',
            '/[\\S]/u',
            '/[\\w]/u',
            '/[\\W]/u',
            '/[\\f]/u',
            '/[\\n]/u',
            '/[\\r]/u',
            '/[\\t]/u',
            '/[\\v]/u',
            '/[\\cA]/u',
            '/[\\cz]/u',
            '/[\\0]/u',
            '/[\\x12]/u',
            '/[\\u1234]/u',
            '/[\\u12345]/u',
            '/[\\u{a}]/u',
            '/[\\u{20}]/u',
            '/[\\u{10FFFF}]/u',
            '/[\\u{00000001}]/u',
            '/[\\^]/u',
            '/[\\$]/u',
            '/[\\.]/u',
            '/[\\+]/u',
            '/[\\?]/u',
            '/[\\(]/u',
            '/[\\)]/u',
            '/[\\[]/u',
            '/[\\]]/u',
            '/[\\{]/u',
            '/[\\}]/u',
            '/[\\|]/u',
            '/[\\/]/u',
            '/[\\s]/u',
            '/^[0-9]*$/u',
            '/^[0-9]+$/u',
            '/^[a-zA-Z]*$/u',
            '/^[a-zA-Z]+$/u',
            '/^[a-zA-Z0-9!-/:-@\\[-`{-~]*$/u',
            '/^([0-9]{0,8})$/u',
            '/^https?:\\/\\//u',
            '/^\\d{3}-\\d{4}$/u',
            '/^\\d{1,3}(.\\d{1,3}){3}$/u',
            '/^([1-9][0-9]*|0)(\\.[0-9]+)?$/u',
            '/^-?([1-9][0-9]*|0)(\\.[0-9]+)?$/u',
            '/^[„ÅÅ-„Çì„Éº]*$/u',
            '/^[„Ç°-„É≥„É¥„Éº]*$/u',
            '/^[ÔΩß-ÔæùÔæûÔæü\\-]*$/u',
            '/^[^\\x20-\\x7e]*$/u',
            '/^[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/u',
            '/^\\s*|\\s*$/u',
        ];

        for (const arg of validSyntax) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Unicode);
                });
            });
        }
    });
});