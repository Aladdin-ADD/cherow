import * as assert from 'clean-assert';
import * as t from 'assert';
import { ValidatorState, validateRegExp } from '../../../../src/regexp';
import { Context } from '../../../../src/utilities';
import * as ESTree from '../../../../src/estree';

describe.skip('Lookbehind', () => {

    describe.skip('Failure', () => {
        const invalidSyntax = [
            '/(?<a)/',
            '/(?<a)/',
            '/(?<=a)?/',
            '/(?<!a)?/',
            '/(?<!a)*/',
            '/(?<!a){1}/',
            '/(?<=a)*/',
            '/(?<=a){1}/',
            '/(?<=.)*/',
            '/(?<=.)?/',
            '/(?<=.)+/',
            '/(?<!a)?/',
            '/(?<!a)+/',
            '/(?<!a){1}/',
            '/(?<!a)*/',
            '/.(?<!.)?/',
            '/.(?<=.){2,3}/;'
        ];
        for (const arg of invalidSyntax) {

            it(`${arg}`, () => {

                t.throws(() => {
                    validateRegExp(`${arg}`, ValidatorState.Empty);
                });
            });
        }
    });

    describe.skip('Pass', () => {
         const vadlidSyntax = [
            '/(?<=a)/',
            '/(?<!a)/',
            '/^.(?<=a)/',
            '/^f\w\w(?<=\woo)/',
            '/(?<=a[a-z][a-z])\w\w\w/',
            '/(?<=[a|b|c]*)[^a|b|c]{3}/',
            '/(?<=^abc)def/',
            '/(?<=^[a-c]{3})def/',
            '/(?<=\b)[d-f]{3}/',
            '/(?<=\B)\w{3}/',
            '/(?<=(\w(\w)))def/',
            '/(?<=\B)(?<=c(?<=\w))\w{3}/',
            '/(?<=.)',
            '/(?<!abc)\w\w\w/',
            '/(?<!a.c)\w\w\w/',
            '/(?<!a[a-z]{2})\w\w\w/',
            '/^(f)oo(?<=^\\1o+).$/',
            '/(?<=^\w+)def/',
            '/(?<!abc)def/',
            '/(?<!a.c)def/',
            '/(?<!a[a-z][a-z])def/',
            '/(?<!a[a-z]{2})def/',
            '/(?<!a{1}[a-z]{2})def/',
            '/(?<=(c))def/',
            '/(?<=(\w{2}))def/',
            '/(?<=(\w){3})def/',
            '/(?<=(bc)|(cd))./',
            '/(?<=([ab]{1,2})\D|(abc))\w/',
            '/\D(?<=([ab]+))(\w)/',
            '/(?<=[b-e])\w{2}/',
            '/(?<!(^|[ab]))\w{2}/',
            '/(?<=a(?=([^a]{2})d)\w{3})\w\w/',
            '/((\w)\w)(?<=\\1\\2\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(?<=\\1(\w+))c/',
            '/.*(?<=(..|...|....))(.*)/',
            '/.*(?<=(xx|...|....))(.*)/',
            '/.*(?<=(xx|...))(.*)/',
            '/.*(?<=(xx|xxx))(.*)/',
            '/(?<=(b+))c/',
            '/(?<=(b\d+))c/',
            '/(?<=((?:b\d{2})+))c/',
            '/(?<=^(\w+))def/',
            '/(?<=$abc)def/',
            '/^foo(?<=foo)$/',
            '/^f.o(?<=foo)$/',
            '/^foo(?<!foo)$/',
            '/^f.o(?<!foo)$/',
            '/(?<=(?:\\1b)(aa))./',
            '/^foooo(?<=fo*)$/',
            '/(?<=(bc)|(cd))./',
            '/(?<=(\w){3})def/',
            '/(?<=([ab]{1,2})\D|(abc))\w/',
            '/\D(?<=([ab]+))(\w)/',
            '/(?<=b|c)\w/',
            '/(?<=[b-e])\w{2}/',
            '/(?<!(^|[ab]))\w{2}/',
            '/(?<=ab(?=c)\wd)\w\w/',
            '/(?<=a(?=([^a]{2})d)\w{3})\w\w/',
            '/(?<=a(?=([bc]{2}(?<!a{2}))d)\w{3})\w\w/',
            '/(?<=a(?=([bc]{2}(?<!a*))d)\w{3})\w\w/',
            '/(?=(\w))(?<=(\\1))./',
            '/(.)(?<=(\\1\\1))/',
            '/(.)(?<=(\\1\\1))/',
            '/^faaao?(?<=^f[oa]+(?=o))/',
            '/(.)(?<=(\\1\\1))/',
            '/(.)(?<=(\\1\\1))/',
            '/((\w)\w)(?<=\\1\\2\\1)/',
            '/(\w(\w))(?<=\\1\\2\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(?=(\w))(?<=(\\1))./',
            '/(?<=(.))(\w+)(?=\\1)/',
            '/(.)(?<=\\1\\1\\1)/',
            '/(.)(?<=\\1\\1\\1)/',
            '/(.)(?<=\\1\\1\\1)/',
            '/(..)(?<=\\1\\1\\1)/',
            '/(?<=\\1(\w+))c/',
            '/(?<=\\1(\w))d/',
            '/(?<=\\1([abx]))d/',
            '/(?<=(\w+)\\1)c/',
            '/.*(?<=(..|...|....))(.*)/',
            '/.*(?<=(xx|...|....))(.*)/',
            '/.*(?<=(xx|...))(.*)/',
            '/.*(?<=(xx|xxx))(.*)/',
            '/(?<=([abc]+)).\\1/',
            '/(?<=((?:b\d{2})+))c/',
            '/(?<=(b\d+))c/',
            '/(?<=(b+))c/',
            '/(?<=^(\w+))def/',
            '/(?<=$abc)def/',
            '/^foo(?<=foo)$/',
            '/^f.o(?<=foo)$/',
            '/^foooo(?<=fo+)$/',
            '/^foooo(?<=fo*)$/',
            '/(abc\\1)/',
            '/^foo(?<!foo)$/',
            '/(?<=a(.\\2)b(\\1)).{4}/',
            '/(?<=a(\\2)b(..\\1))b/',
            '/(?<=(?:\\1|b)(aa))./',
            '/(?<!abc)\w\w\w/',
            '/(?<!a.c)\w\w\w/',
            '/(?<!a\wc)\w\w\w/',
            '/(?<!a[a-z])\w\w\w/',
            '/(?<!a[a-z]{2})\w\w\w/',
            '/(?<!a.c)def/',
            '/(?<!a[a-z][a-z])def/',
            '/(?<!a[a-z]{2})def/',
            '/(?<!a{1}b{1})cde/',
            '/(abc\\1)/',
            '/(?=(abcdefghijklmn))(?<=\\1)a/',
            '/(?=(abcdefghijklmn))(?<=\\1)a/',
            '/(?<=a(.\\2)b(\\1)).{4}/',
            '/(?<=a(\\2)b(..\\1))b/',
            '/(?<=(?:\\1|b)(aa))./',
            '/(?<=(?<a>\\w){3})f/u',
            '/(?<a>(?<!\\D{3}))f|f/',
            '/(?<a>(?<=\\w{3}))f/',
            '/((?<=\\w{3}))f/',
            '/(?<=(?<a>\\w){3})f/',
        ];

        for (const arg of vadlidSyntax) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, ValidatorState.Empty);
                });
            });
        }
    });
});
