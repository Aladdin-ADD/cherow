import { fail } from '../utils/test-utils';

fail('/*', `/*`);
fail('/*\r', `/*\r`);
fail('/*\r\n', `/*\r\n`);
fail('/*\u2028', `/*\u2028`);
fail('/*\u2029', `/*\u2029`);
fail('/**', `/**`);
fail('\\', `\\`);
fail('\\u', `\\u`);
fail('\\x', `\\x`);
fail('\\o', `\\o`);
fail('\\u1', `\\u1`);
fail('\\u12', `\\u12`);
fail('\\u113', `\\u113`);
fail('a\\uz', `a\\uz`);
fail('a\\u1z  ', `a\\u1z  `);
fail('a\\u11z ', `a\\u11z `);
fail('a\\', `a\\`);
fail('a\\u', `a\\u`);
fail('a\\x', `a\\x`);
fail('a\\o', `a\\o`);
fail('a\\u12', `a\\u12`);
fail('\\uD800x', `\\uD800x`);
fail('＊', `＊`);
fail('\uD800\\u', `\uD800\\u`);
fail('\\uD800\\x62', `\\uD800\\x62`);
fail('\uD800x', `\uD800x`);
fail('1.a', `1.a`);
fail('1.e', `1.e`);
fail('1.e+', `1.e+`);
fail('0xz', `0xz`);
fail('08a', `08a`);
fail('\u0008', `\u0008`);
fail('0a', `0a`);
fail('}', `}`, true);
fail('3ea', `3ea`);
fail('3in []', `3in []`);
fail('3e', `3e`);
fail('3x0', `3x0`);
fail('3in[]', `3in[]`);
fail('x\\u002a', `x\\u002a`);
fail('\\ua', `\\ua`);
fail('for((1 + 1) in list) process(x);', `for((1 + 1) in list) process(x);`);
fail('[', `[`);
fail('[,', `[,`);
fail('1 + { t:t ', `1 + { t:t `);
fail('1 + {', `1 + {`);
fail('i #= 0', `i #= 0`);
fail('\n\n\n{', `\n\n\n{`);
fail('\n/* Some multiline\ncomment */\n)', `\n/* Some multiline\ncomment */\n)`);
fail('{ get 2 }', `{ get 2 }`);
fail('{ set 1 }', `{ set 1 }`);
fail('function t(if) { }', `function t(if) { }`);
fail('({ get: g(d) { } })', `({ get: g(d) { } })`);
fail('\u200C = []', `\u200C = []`);
fail('do { x } *', `do { x } *`);
fail('var', `var`);
fail('const', `const`);
fail('**', `**`);
fail('#=', `#=`);
fail('\\u{}', `\\u{}`);
fail('\\u{FFFF', `\\u{FFFF`);
fail('\\u{FFZ}', `\\u{FFZ}`);
fail('("\\u{}")', `("\\u{}")`);
fail('/./a', `/./a`);
fail('/./ii', `/./ii`);
fail('enum : 0', `enum : 0`);
fail('({get +:3})', `({get +:3})`);
fail('{ ;  ;  ', `{ ;  ;  `);
fail('a b', `a b`);
fail('try { } catch() {}', `try { } catch() {}`);
fail('/*\r\n*/]', `/*\r\n*/]`);
fail('//\r\n]', `//\r\n]`);
fail('\r]', `\r]`);
fail('\n]', `\n]`);
fail('/*hello', `/*hello`);
fail('try {} catch (answer()) {} ', `try {} catch (answer()) {} `);
fail('for(;;)', `for(;;)`);
fail('for (let [] = 0, {};;);', `for (let [] = 0, {};;);`);
fail('for (let [];;);', `for (let [];;);`);
fail('for (var i, i2 in {});', `for (var i, i2 in {});`);
fail('if.a;', `if.a;`);
fail('a if', `a if`);
fail('function true() { }', `function true() { }`);
fail('"\\ux";', `"\\ux";`);
fail('"\\u000";', `"\\u000";`);
fail('0O', `0O`);
fail('0o18', `0o18`);
fail('0O1a', `0O1a`);
fail('x\\', `x\\`);
fail('/test', `/test`);
fail('3 = 4', `3 = 4`);
fail('[,', `[,`);
fail('var x = "', `var x = "`);
fail('i #= 42', `i #= 42`);
fail('({[a,b]:0})', `({[a,b]:0})`);
fail('"use strict"; eval => 42', `"use strict"; eval => 42`);
fail('use strict"; (a) => 00', `use strict"; (a) => 00`);
fail('p = { q/ }', `p = { q/ }`);
fail('function t(false) { }', `function t(false) { }`);
fail('continue', `continue`);
fail('if(false) doThis(); else', `if(false) doThis(); else`);
fail('x: while (true) { (function () { continue x; }); }', `x: while (true) { (function () { continue x; }); }`);
fail('function hello() {"use strict"; eval = 10; }', `function hello() {'use strict'; eval = 10; }`);
fail('function eval() {"use strict"; })()', `function eval() {'use strict'; })()`);
fail('const', `const`);
fail('class A {get constructor(){}}', `class A {get constructor(){}}`);
fail('delete o.p ** 2;', `delete o.p ** 2;`);
fail('x %*= y', `x %*= y`);
fail('({a}) => { "use strict"; }', `({a}) => { 'use strict'; }`);
fail('a => {}()', `a => {}()`);

// Failing tests not covered by Test262 parser-tests

fail('"async function* foo() { }', `"async function* foo() { }`);
fail('async function wrap() {\nasync function await() { }\n}', `async function wrap() {\nasync function await() { }\n}`);
fail('async function foo(await) { }', `async function foo(await) { }`);
fail('async function foo() { return {await} }', `async function foo() { return {await} }`);
fail('(async\nfunction foo() { })', `(async\nfunction foo() { })`);
fail('(async function* foo() { })', `(async function* foo() { })`);
fail('(async function await() { })', `(async function await() { })`);
fail('(async function foo(await) { })', `(async function foo(await) { })`);
fail('(async function foo() { return {await} })', `(async function foo() { return {await} })`);
fail('async\n() => a', `async\n() => a`);
fail('async a\n=> a', `async a\n=> a`);
fail('async ()\n=> a', `async ()\n=> a`);
fail('async await => 1', `async await => 1`);
fail('async (await) => 1', `async (await) => 1`);
fail('async ({await}) => 1  ', `async ({await}) => 1`);
fail('async ({a: await}) => 1', `async ({a: await}) => 1`);
fail('({async\nfoo() { }})', `({async\nfoo() { }})`);
fail('({async get foo() { }})', `({async get foo() { }})`);
fail('({async set foo(value) { }})', `({async set foo(value) { }})`);
fail('({async foo() { var await }})', `({async foo() { var await }})`);
fail('({async foo(await) { }})', `({async foo(await) { }})`);
fail('({async foo() { return {await} }})', `({async foo() { return {await} }})`);
fail('({async foo: 1})', `({async foo: 1})`);
fail('class A {async get foo() { }}', `class A {async get foo() { }}`);
fail('class A {async set foo(value) { }}', `class A {async set foo(value) { }}`);
fail('class A {static async set foo(value) { }}', `class A {static async set foo(value) { }}`);
fail('class A {async foo() { return {await} }}', `class A {async foo() { return {await} }}`);
fail('invalid', `await a`);
fail('invalid', `await a`, true);
fail('async () => await', `async () => await`);
fail('(class {async foo() { await }})', `(class {async foo() { await }})`);
fail('async function foo(a = await b) {}', `async function foo(a = await b) {}`);
fail('async (a = await b) => {}', `async (a = await b) => {}`);

// Revisited Template
fail('`\\unicode`', '`\\unicode`');
fail('`\\u{abcdx`', '`\\u{abcdx`');
fail('`\\u`', '`\\u`');
fail('foo`\\unicode', 'foo`\\unicode');
fail('`\\unicode`', '`\\unicode`');
fail('`\\unicode`', '`\\unicode`');
fail('`\\unicode`', '`\\unicode`');
fail('`\\unicode`', '`\\unicode`');

// Harmony
fail('([a.a]) => 42', `([a.a]) => 42`);
fail('() => {}()', `() => {}()`);
fail('(a) => {}()', `(a) => {}()`);
fail('function *g() { (x = yield) => {} }', `function *g() { (x = yield) => {} }`);
fail('class A { constructor() {} "constructor"() }', `class A { constructor() {} 'constructor'() }`);
fail('({[x]})', `({[x]})`);
fail('0O9', `0O9`);
fail('( { get x() {} } = 0)', `( { get x() {} } = 0)`);
fail('x \n is y', `x \n is y`);
fail('x \n isnt y', `x \n isnt y`);
fail('for (let x = 42 in list) process(x);', `for (let x = 42 in list) process(x);`);
fail('(10, 20) => 00', `(10, 20) => 00`);
fail('yield v', `yield v`);
fail('let [this] = [10]', `let [this] = [10]`);
fail('let {this} = x', `let {this} = x`);
fail('([function] = [10])', `([function] = [10])`);
fail('({this} = x)', `({this} = x)`);
fail('var x = {this}', `var x = {this}`);
fail('var obj = { *test** }', `var obj = { *test** }`);
fail('class A extends yield B { }', `class A extends yield B { }`);
fail('class default', `class default`);
fail('function a() 1 // expression closure is not supported', `function a() 1 // expression closure is not supported`);
fail('({ 42 }) = obj', `({ 42 }) = obj`);
fail('({ 5 }) => {}', `({ 5 }) => {}`);
fail('({ get test() { } }) => 42', `({ get test() { } }) => 42`);
fail('let [function] = x', `let [function] = x`);
fail('"use strict"; let + 1', `"use strict"; let + 1`);
fail('(localVar |= defaultValue) => {}', '(localVar |= defaultValue) => {}');
fail('let [x]', `let [x]`);
fail('if (1) let x = 10;', `if (1) let x = 10;`);
fail('function* y({yield}) {}', `function* y({yield}) {}`);
fail('new.target', `new.target`);
fail('({ __proto__: 1, __proto__: 2 })', `({ __proto__: 1, __proto__: 2 })`);
fail('({ __proto__: 1, __proto__: 2 })', `({ __proto__: 1, __proto__: 2 })`);
fail('[...x in y] = []', `[...x in y] = []`);
fail('/[a-z]/s', `/[a-z]/s`);
fail('(function* foo(a = yield b) {})', `(function* foo(a = yield b) {})`);
fail('function* foo(a = class extends (yield b) {}) {}', `function* foo(a = class extends (yield b) {}) {}`);
fail('foo: class X {}', `foo: class X {}`);
fail('var foo = 1; let foo = 1;', `var foo = 1; let foo = 1;`);
fail('class A { get constructor() {} }', `class A { get constructor() {} }`);
fail('class A { *constructor() {} }', `class A { *constructor() {} }`);
fail('(function ({ a(){} }) {})', `(function ({ a(){} }) {})`);
fail('var a = { set foo(...v) {} };', `var a = { set foo(...v) {} };`);
fail('class a { set foo(...v) {} };', `class a { set foo(...v) {} };`);
fail('class A extends B { constructor() { super } }', `class A extends B { constructor() { super } }`);
fail('class A extends B { constructor() { super; } }', `class A extends B { constructor() { super; } }`);
fail('class A extends B { foo() { (super).foo } }', `class A extends B { foo() { (super).foo } }`);
fail('[2] = 42', `[2] = 42`);
fail('({ obj:20 }) = 42', `({ obj:20 }) = 42`);
fail('(a, a) => 42', `(a, a) => 42`);
fail('void { [1, 2]: 3 };', `void { [1, 2]: 3 };`);
fail('((a)) => 42', `((a)) => 42`);
fail('let default', `let default`);
fail('\\u{110000}', `\\u{110000}`);
fail('let default', `let default`);
fail('let [function] = [10]', `let [function] = [10]`);
fail('(function () { yield 10 })', `(function () { yield 10 })`);
fail('function f(a, ...b = 0)', `function f(a, ...b = 0)`);
fail('for (;;) const x = 10;', `for (;;) const x = 10;`);
fail('while (1) function foo(){}', `while (1) function foo(){}`);
fail('x = { method() 42 }', `x = { method() 42 }`);
fail('x = { get method() 42 }', `x = { get method() 42 }`);
fail('super', `super`);
fail('function* wrap() { return (a = 1 + (yield)) => a }', `function* wrap() { return (a = 1 + (yield)) => a }`);
fail('function* foo(a = yield b) {}', `function* foo(a = yield b) {}`);
fail('(function* foo(a = yield b) {})', `(function* foo(a = yield b) {})`);
fail('(class {*foo(a = yield b) {}})', `(class {*foo(a = yield b) {}})`);
fail('"use strict"; bar: function x() {}', `"use strict"; bar: function x() {}`);

// Module code

fail('export var await', `export var await`, true);
fail('export new Foo();', `export new Foo();`, true);
fail('export typeof foo;', `export typeof foo;`, true);
fail('export *;', `export *`, true);
fail('export { default }', `export var await`, true);
fail('export { if }', `export new Foo();`, true);
fail('export { default as foo }', `export typeof foo;`, true);
fail('export { if as foo }', `export { if as foo }`, true);
fail('import * as enum from "foo"', 'import * as enum from "foo"', true);
fail('import { enum } from "foo"', 'import { enum } from from "foo"', true);
fail('import { a as class } from from "foo"', `import { a as class } from from "foo"`, true);
