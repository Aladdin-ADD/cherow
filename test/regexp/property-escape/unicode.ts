import * as t from 'assert';
//import { ValidatorState, validateRegExp } from '../../../../src/regexp/regexp';
import { Context } from '../../../../src/utilities';
import * as ESTree from '../../../../src/estree';

describe.skip('Unicode property escape', () => {

    describe.skip('Failure', () => {
        const invalidSyntax = [
            '/\\p/u',
            '/\\p{/u',
            "/\\p{ASCII/u",
//            "/[\\p{Script=Hiragana}-\\p{Script=Katakana}]/u",
            '/\\p{General_Category}/u',
            '/\\p{General_Category=}/u',
            '/\\p{General_Category/u',
            '/\\p{General_Category=/u',
            '/\\p{General_Category=Letter/u',
            '/\\p{General_Category=Hiragana}/u',
            '/[\\p}]/u',
            '/[\\p{}]/u',
            '/[\\p{invalid}]/u',
            '/[\\p{]/u',
            '/[\\p{]}/u',
            '/[\\p}]/u',
            '/^\p{Any}+$/u',
            '/^\p{Bidi_C}+$/u,',
            '/^\P{gc=Currency_Symbol}+$/u,',
            '/\\p{ASCII=Yes}/u',
            '/\\p{ASCII=Y}/u',
            '/\\p{ASCII=T}/u',
            '/\\P{ASCII=No}/u',
            '/\\P{ASCII=N}/u',
            '/\\P{ASCII=F}/u',
            '/\\p{ASCII=Invalid}/u',
            '/^\p{Pd}+$/u,',
            '/^\P{gc=Pd}+$/u,',
            '^\p{gc=Decimal_Number}+$/u,',
            '/\\p{Extended_Pictographic}/u',
            '/\\p{Expands_On_NFKD}/u',
            '/\\P{Expands_On_NFKC}/u',
            '/\\p{FC_NFKC_Closure}/u',
            '/\\P{FC_NFKC_Closure}/u',
            '/\\p{Full_Composition_Exclusion}/u',
            "/\\p{Comp_Ex}/u",
            "/\\p{Grapheme_Link}/u",
            "/\\p{Gr_Link}/u",
            "/\\p{Hyphen}/u",
            "/\\p{NFD_Inert}/u",
            "/\\p{NFDK_Inert}/u",
            "/\\p{NFC_Inert}/u",
            "/\\p{NFKC_Inert}/u",
            "/\\p{Segment_Starter}/u",
            '/\p{Alphabetic}/u',
            '/\p{CWCF}/u',
            '/\p{Emoji_Component}/u',
            '/\p{Emoji_Presentation}/u',
            '/\p{IDS_Trinary_Operator}/u',
            '/\p{Uppercase}/u',
            '/\p{Variation_Selector}/u',
            '/[\\p{invalid}]/u',
            '/[\\p{}]/u',
            '/[\\p{invalid}]/u',
            '/[\\p{]/u',
            '/[\\p{]}/u',
            '/[\\p}]/u',
            '/\\P{FC_NFKC_Closure}/u',
            '/\\p{Grapheme_Link}/u',
            '/\\P{Grapheme_Link}/u',
            '/\\P{Hyphen}/u',
            '/\\p{Other_Alphabetic}/u',
            '/\\P{Other_Alphabetic}/u',
            '/\\p{Other_Default_Ignorable_Code_Point}/u',
            '/\\P{Other_Default_Ignorable_Code_Point}/u',
            '/\\p{Other_Grapheme_Extend}/u',
            '/\\P{Other_Grapheme_Extend}/u',
            '/\\p{Other_ID_Continue}/u',
            '/\\P{Other_ID_Continue}/u',
            '/\\p{Other_Lowercase}/u',
            '/\\p{Other_Math}/u',
            '/\\P{Other_Uppercase}/u',
            '/\\p{Prepended_Concatenation_Mark}/u',
            '/\\P{Prepended_Concatenation_Mark}/u',
            '/\\P{Line_Break}/u',
            '/\\p{Line_Break=Alphabetic}/u',
            '/\\P{Line_Break=Alphabetic}/u',
            '/\\P{FC_NFKC_Closure}/u',
            '/\\p{Block=Adlam}/u',
            '/\\p{General_Category=WAT}/u',
            '/\\P{Line_Breakz=WAT}/u',
            '/\\p{Script=FooBarBazInvalid}/u',
            '/\\p{Script_Extensions=H_e_h}/u',
            '/\\P{Script_Extensions=H_e_h}/u',
            '/\\p{UnknownBinaryProperty}/u',
            '/\\p{Line_Breakz=Alphabetic}/u',
            '/\\p{General_Category}/u',
            '/\\P{Script}/u',
            '/\\p{Script=}/u',
            '/\\P{Script=}/u',
            '/\\p{Script_Extensions}/u',
            '/\\p{Script_Extensions=}/u',
            '/\\p{lowercase}/u',
            '/\\P{_-_lOwEr_C-A_S-E_-_}/u',
            '/\\p{General_Category = Uppercase_Letter}/u',
            '/\\p{gc=uppercaseletter}/u',
            '/\\P{gC=uppercase_letter}/u',
            '/\\P{ANY}/u',
            '/\\p{any}/u',
            '/\\p{assigned}/u',
            '/\\p{InScript=Adlam}/u',
            '/\\p{inScript=Adlam}/u',
            '/\\P{inScript=Adlam}/u',
            '/\\P{InAdlam}/u',
            '/\\PL/u',
            '/\\p{=Letter}/u',
            '/\\P{=Letter}/u',
            '/\\P{=}/u',
            '/\\p{=}/u',
            "/\\p{Hiragana}/u",
            "/\\p{Bidi_Class}/u",
            "/\\p{Bidi_C=False}/u",
            "/\\P{Bidi_Control=Y}/u",
            "/\\p{AHex=Yes}/u",
            "/\\p{Composition_Exclusion}/u",
            "/\\p{Full_Composition_Exclusion}/u",
            '/\\p{^General_Category=Letter}/u',
            '/\\p{General_Category:Letter}/u',
            '/\\P{General_Category:Letter}/u',
            '/a\P{Any}a/u',
            '/(?:a\P{Any}a|a\p{Any}a)/u',
            '\\1(\\P{P\0[}()/u',
            '/\p{Regional_Indicator}/u',
            '/\\p{Block = CJK}/u',
            '/\\p{Block=cjk}/u',
            '/\\p{bidi_c=Left_To_Right}/u',
            '/\\p{BLK=CJK}/u',
            '/\p{gc=Ll}/u',
            '/\p{Block=Basic_Latin}+/u',
            '/\p{Bidi_Class=Arabic_Letter}+/u',
            '/\p{ccc=OV}+/u',
            '/\p{Sentence_Break=Format}+/u',
            '/\\p{In}/u',
            '/\\pI/u',
            '/\\p{I}/u',
            '/\\p{CJK}/u',
            '/\p{scx=Deva}/u',
            '/(?=\P{sc=Dupl})\p{scx=Dupl}/u',
            '/\p{scx=Grek}/u',
            '/(?=\P{sc=Grek})\p{scx=Grek}/u',
            '/\p{scx=Deva}/u',
            '/\p{scx=Hani}/u',
            '/\P{scx=Mlym}/u',
            '/\p{scx=Takr}/u',
            '/\p{ASCII}+/u',
            '/\P{Assigned}+/u',
            '/\\P{garbage}/u',
            '/\\P{}/u',
            '/\\P}/u',
           '/^[\p{Lu}-\p{Ll}]+$/u',
           '/\p{Sm}/u',
           '/\P{L}/u',
           '/^\p{scx=Java}+$/u',
           '/^\P{Script_Extensions=Javanese}+$/u',
           '/^\P{Script_Extensions=Java}+$/u',
           '/^\P{scx=Javanese}+$/u',
           '/^\P{scx=Java}+$/u',
           '/^\p{scx=Kana}+$/u',
           '/^\p{Script_Extensions=Sind}+$/u',
           '/^\P{Script_Extensions=Khudawadi}+$/u',
           '/^\p{scx=Lepcha}+$/u',
           '/^\p{scx=Lepc}+$/u',
           '/^\p{scx=Mahj}+$/u',
           '/^\P{Script_Extensions=Mahajani}+$/u',
           '/^\P{scx=Mahajani}+$/u',
           '/^\p{scx=Mlym}+$/u',
           '/^\P{scx=Malayalam}+$/u',
           '/^\p{scx=Modi}+$/u',
           '/^\p{scx=Nshu}+$/u',
           '/^\P{Script_Extensions=Nshu}+$/u',
           '/^\p{scx=Pauc}+$/u',
           '/^\P{scx=Pau_Cin_Hau}+$/u',
           '/^\p{scx=Shrd}+$/u',
           '/^\p{scx=Warang_Citi}+$/u',
           '/^\P{XID_Start}+$/u',
           '/^\P{XIDS}+$/u',
           "/\\p{Bidi_Class=L}+/u",
           "/\\p{Block=}/u",
           "/\\p{=}/u",
           "/\\p{=L}/u",
           "/\\p{Block=CJK=}/u",
           "/\\p{Age=V8_0}/u",
           "/\\p{gcm=L}/u",
           "/\\p{InCJKUnifiedIdeographs}/u",
           
"/\\p{Coptic}/u",
"/\\p{Qaac}/u",
"/\\p{Egyp}/u",
"/\\p{BidiClass=LeftToRight}/u",
"/\\p{BidiC=LeftToRight}/u",
"/\\p{bidi_c=Left_To_Right}/u",
"/\\p{Block=CJK}/u",
"/\\p{Block = CJK}/u",
"/\\p{Block=cjk}/u",
"/\\p{BLK=CJK}/u",
"/\\p{EgyptianHieroglyphs}/u",
"/\\p/u",
"/\\p{garbage}/u",
"/\\p{}/u",
"/\\p{/u",
"/\\p}/u",
"/\\pL/u",
"/\\P/u",
"/\\P{garbage}/u",
"/\\P{}/u",
"/\\P{/u",
"/\\P}/u",
"/\\PL/u",
"/\p{Block=ASCII}+/u",
"/\p{Block=ASCII}+/u",
"/\p{Block=Basic_Latin}+/u",
"/\p{Block=Basic_Latin}+/u",
"/\p{blk=CJK}+/u",
"/\p{blk=CJK_Unified_Ideographs}+/u",
"/\p{blk=CJK}+/u",
"/\p{blk=CJK_Unified_Ideographs}+/u",
"/\p{Block=ASCII}+/u",
"/\p{Block=ASCII}+/u",
"/\p{Block=Basic_Latin}+/u",
"/\p{Block=Basic_Latin}+/u",
"/\p{NFKD_Quick_Check=Y}+/u",
"/\p{NFKD_QC=Yes}+/u",
"/\p{Numeric_Type=Decimal}+/u",
"/\p{nt=De}+/u",
"/\p{Bidi_Class=Arabic_Letter}+/u",
"/\p{Bidi_Class=AN}+/u",
"/\p{ccc=OV}+/u",
"/\p{Sentence_Break=Format}+/u",
"/\\p{In}/u",
"/\\pI/u",
"/\\p{I}/u",
"/\\p{CJK}/u",
'/\p{Script_Extensions=Cypriot}+/u',
'/\p{Script=Latin}+/u',
'\p{sc=Hiragana}/u',
'/\p{sc=Greek}/u',
'/\p{sc=Grek}/u',
'/\p{sc=Phnx}/u',
'/\p{sc=Hira}/u',
"/\\p{Other_Alphabetic}/u",
"/\\P{OAlpha}/u",
"/\\p{Other_Default_Ignorable_Code_Point}/u",
"/\\P{ODI}/u",
"/\\p{Other_Grapheme_Extend}/u",
"/\\P{OGr_Ext}/u",
"/\\p{Other_ID_Continue}/u",
"/\\P{OIDC}/u",
"/\\p{Other_ID_Start}/u",
"/\\P{OIDS}/u",
"/\\p{Other_Lowercase}/u",
"/\\P{OLower}/u",
"/\\p{Other_Math}/u",
"/\\P{OMath}/u",
"/\\p{Other_Uppercase}/u",
"/\\P{OUpper}/u",

        ];

        for (const arg of invalidSyntax) {

            it(`${arg}`, () => {

                t.throws(() => {
                    validateRegExp(`${arg}`, true);
                });
            });
        }
    });

    describe.skip('Pass', () => {
        const validSyntax = [
            '/\\p{General_Category=Letter}/u',
            '/[\\p{Script=Hiragana}\\-\\p{Script=Katakana}]/u',
            ' /[\p{Hex}-\uFFFF]/u',
            "/\\p{General_Category=Letter}/u",
            "/\\p{gc=L}/u",
            'a\u{d83d}a',
            '/a[\P{Any}]a/u',
            '/a[^\P{Any}x]a/u',
            '/a[^\P{Any}]a/u',
            '/^[\p{Lu}-]+$/u',
            '/^[\\p{Lu}-\\p{Ll}]+$/u',
            '/[^\P{ASCII}]+/u',
            '/[^\P{Assigned}]+/u',
            '/\\p{Other}/u',
            '/\\p{Cc}/u',
            '/\\p{Control}/u',
           '/^[\P{Lu}]+$/u',
           '/^[^\P{Lu}]+$/u',
           '/^[^\p{Lu}\P{Ll}]+$/u',
           '/^[\P{Lu}\p{Ll}]+$/u',
           '/[\P{Bidi_M}]/u',
           "/[\\p{L}]/u",
           "/\\p{Script=Egyptian_Hieroglyphs}/u",
           "/\\p{Combining_Mark}/u",
           "/\\p{C}/u",
           "/\\p{Other}/u",
           "/\\p{Control}/u",
           "/\\p{M}/u",
           "/\\p{Mark}/u",
           "/\\p{Script=Copt}/u",
           

        ];

        for (const arg of validSyntax) {

            it(`${arg}`, () => {

                t.doesNotThrow(() => {
                    validateRegExp(`${arg}`, true);
                });
            });
        }
    });
});





