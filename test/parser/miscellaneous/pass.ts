import { pass, fail } from '../../test-utils';
import { Context } from '../../../src/utilities';
import * as t from 'assert';
import { parse } from '../../../src/parser/parser';

describe('Miscellaneous - Pass', () => {

    const programs = [
        '"\\u{714E}\\u{8336}"',
        '"\\u{20BB7}\\u{91CE}\\u{5BB6}"',
        '0o0',
        'function test() {\'use strict\'; 0o0; }',
        '0o2',
        '0o12',
        '0O0',
        'function test() {\'use strict\'; 0O0; }',
        '0O2',
        '0b10',
        '0B1',
        '0B10',
        '`42`',
        'raw`42`',
        'raw`hello ${name}`',
        '`$`',
        '`\\n\\r\\b\\v\\t\\f\\\n\\\r\n`',
        '`\n\r\n\r`',
        '`\\u{000042}\\u0042\\x42u0\\A`',
        'new raw`42`',
        '`outer${{x: {y: 10}}}bar${`nested${function(){return 1;}}endnest`}end`',
        'switch (answer) { case 42: let t = 42; break; }',
        '() => "test"',
        'e => "test"',
        'eval => 42',
        '(a) => 00',
        '(eval, a = 10) => 42',
        '(x => x)',
        'x => y => 42',
        '(x) => ((y, z) => (x, y, z))',
        'foo(() => {})',
        'foo((x, y) => {})',
        'x = { method() { } }',
        '[a, b] = [b, a]',
        '[a.r] = b',
        'let [a,,b] = c',
        '({ responseText: text } = res)',
        'const {a} = {}',
        'const [a] = []',
        'let {a} = {}',
        'let [a] = []',
        'var {a} = {}',
        'const {a:b} = {}',
        'class A {\'constructor\'() {}}',
        '({f: function({x} = {x: 10}) {}})',
        '({f({x} = {x: 10}) {}})',
        '(class {f({x} = {x: 10}) {}})',
        '(({x} = {x: 10}) => {})',
        'x = function(y = 1) {}',
        'function f(a = 1) {}',
        'x = { f: function(a=1) {} }',
        'function f(a, ...b) {}',
        'function x([ a, b ]){}',
        'function x({ a, b }){}',
        '(function x({ a, b }){})',
        '({ x([ a, b ]){} })',
        '({ x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){} })',
        '(...a) => {}',
        '(a, ...b) => {}',
        '({ a }) => {}',
        '({ a }, ...b) => {}',
        '({ a: [a, b] }, ...c) => {}',
        '({ a: b, c }, [d, e], ...f) => {}',
        '[...a] = b',
        '[a, ...b] = c',
        '[{ a, b }, ...c] = d',
        '[a, ...[b, c]] = d',
        'var [...a] = b',
        'var [a, ...b] = c',
        'var [{ a, b }, ...c] = d',
        'var [a, ...[b, c]] = d',
        'func(...a)',
        'func(a, ...b)',
        '/[a-z]/u',
        'do {} while (false) foo();',
        'yield* 10',
        'e => yield* 10',
        'let + 1',
        'var yield = 2',
        'doSmth(`${x} + ${y} = ${x + y}`)',
        'function normal(x, y = 10) {}',
        '`{${x}}`, `}`',
        '`${/\\d/.exec(\'1\')[0]}`',
        'var _𐒦 = 10;',
        'var 𫠝_ = 10;',
        'var 𫠝_ = 10;',
        'let [x,] = [1]',
        'for (var [name, value] in obj) {}',
        'function foo() { new.target; }',
        'function foo() { new.target; }',

    ];

    for (const arg of programs) {
        it(`${arg}`, () => {
            t.doesNotThrow(() => {
                parse(`${arg}`, undefined, Context.Empty);
            });
        });
    }
});