import { pass, fail } from '../../test-utils';
import { Context } from '../../../src/utilities';
import * as t from 'assert';
import { parse } from '../../../src/parser/parser';

describe('Miscellaneous - Early errors', () => {

    describe('Failure', () => {

        const programs = [
            // 12.2.5.1
            '({ a = 0 });',
            // 12.2.9.1
            '(...a)',
            '(a, ...b)',
            '(((...a)))',
            '(((a, ...b)))',

            // 12.4.1
            '0++',
            '0--',
            // 12.5.1
            '++0',
            '--0',
            // 12.14.1
            '({a: 0} = 0);',
            '({get a(){}} = 0)',
            '({set a(b){}} = 0)',
            '({a(b){}} = 0)',
            '[0] = 0;',
            '0 = 0;',
            '({a}) = 0;',
            '([a]) = 0;',
            '({a} += 0);',
            '[a] *= 0;',
            '0 /= 0;',
            '[...{a: 0}] = 0;',
            '[...[0]] = 0;',
            '[...0] = 0;',
            '[...new a] = 0;',
            'for({a: 0} in 0);',
            'for([0] in 0);',
            'for({a: 0} of 0);',
            'for([0] of 0);',
            'for(0 in 0);',
            'for(0 of 0);',
            'for(({a: 0}) in 0);',
            'for(([0]) in 0);',
            'for(({a: 0}) of 0);',
            'for(([0]) of 0);',
            'for((0) in 0);',
            'for((0) of 0);',
            //'"use strict"; arguments = 0',
            //'"use strict"; [eval] = 0',
            //'"use strict"; [,,,eval,] = 0',
            //'"use strict"; ({a: eval = 0} = 0)',
            // '"use strict"; [arguments] = 0',
            // '"use strict"; [,,,arguments,] = 0',
            // '"use strict"; ({a: arguments} = 0)',
            // '"use strict"; ({a: arguments = 0} = 0)',
            // '"use strict"; var eval;',
            '"use strict"; let [eval] = 0;',
            '"use strict"; const {a: eval} = 0;',
            '"use strict"; function f(eval){}',
            '"use strict"; !function f(eval){}',
            'function f(eval) { "use strict";}',
            'function *f(eval) { "use strict";}',
            '!function *f(eval) { "use strict";}',
            'class A { f(eval){} };',
            'class A { *f(eval){} };',
            'class A { set f(eval){} };',
            //'class A extends (eval = null) { };',
            //'!class extends (eval = null) { };',
            '"use strict"; +yield;',
            '"use strict"; yield:;',
            '"use strict"; +implements;',
            '"use strict"; +interface;',
            '"use strict"; +let;',
            '"use strict"; +package;',
            '"use strict"; +private;',
            '"use strict"; +protected;',
            '"use strict"; +public;',
            '"use strict"; +yield;',
            '"use strict"; +implements:0;',
            '"use strict"; +interface:0;',
            '"use strict"; +let:0;',
            '"use strict"; +package:0;',
            '"use strict"; +private:0;',
            '"use strict"; +protected:0;',
            '"use strict"; +static:0;',

            '"use strict"; function a([yield]){}',
            //'"use strict"; function a({yield}){}',
            //'"use strict";  function a({yield=0}){}',
            //'"use strict"; function a({a:yield}){}',
            '"use strict"; function a([yield,...a]){}',
            '"use strict"; class A {set a(yield){}}',
            //'({a(yield){ "use strict"; }});',
            // '!{ get a() { "use strict"; }};',
            // '!{ set a(let) { "use strict"; }};',
            '"use strict"; delete (a);',
            '"use strict"; delete ((a));',
            '"use strict"; delete a;',
            // '"use strict"; ({eval} = 0);',
            // '"use strict"; ({arguments} = 0);',

            'for(let let;;);',
            'let a, let = 0;',
            'let a, let;',
            'for(let a, let;;);',
            'for(const let = 0;;);',
            'for(const a = 0, let = 1;;);',
            'for(let [let] = 0;;);',
            'const a;',
            'const a, b = 0;\'',
            'const a = 0, b;',
            '{ const a; }',
            'function f(){ const a; }',
            'for(const a;;);',
            'for(const a = 0, b;;);',
            'if(0) label: function f(){}',
            'if(0) labelA: labelB: function f(){}',
            'if(0) label: function f(){} else ;',
            'if(0) ; else label: function f(){}',
            'do label: function f(){} while (0)',
            'do label: function f(){} while (0);',
            'while(0) label: function f(){}',
            'for(;;) label: function f(){}',
            'for(var a;;) label: function f(){}',
            'for(const a = 0;;) label: function f(){}',
            'for(let a;;) label: function f(){}',
            'for(a in b) label: function f(){}',
            'for(var a in b) label: function f(){}',
            'for(let a in b) label: function f(){}',
            'for(const a in b) label: function f(){}',
            'for(a of b) label: function f(){}',
            'for(var a of b) label: function f(){}',
            'for(let a of b) label: function f(){}',
            'for(const a of b) label: function f(){}',
            'for(;;) labelA: labelB: labelC: function f(){}',
            'for(let let in 0);',
            'for(const let in 0);',
            'for(let let of 0);',
            'for(const let of 0);',
            '{ continue; }',
            'continue',
            'if(0) continue;',
            // "while(0) !function(){ continue; };",
            // "while(0) { function f(){ continue; } }",
            'label: continue label;',
            'label: { continue label; }',
            'label: if(0) continue label;',
            'label: while(0) !function(){ continue label; };',
            'label: while(0) { function f(){ continue label; } }',
            'break;',
            '{ break; }',
            'if(0) break;',
            //"while(0) !function(){ break; };",
            //"while(0) { function f(){ break; } }",
            //"switch(0) { case 0: !function(){ break; }; }",
            // "switch(0) { case 0: function f(){ break; } }",
            // "switch(0) { default: function f(){ break; } }",
            'with(0) label: function f(){}',
            // "function* g(){ (a = yield) => 0; }",
            // "function* g(){ function* f(a = x + f(yield)){} }",
            // "function* g(){ function* f({[yield]: a}){} }",
            // "function* g(){ function* f({a = yield}){} }",
            //"function* g(){ !function*(a = yield){} }",
            //"function* g(){ !function*(a = yield b){} }",
            //"function* g(){ !function*([a = yield]){} }",
            //"function* g(){ !function*(...{a = yield}){} }",
            // "function* a(){ function* b({[yield]: c}){} }",
            '({set a(b){}} = 0)',
            'package => {\'use strict\'}',
            '"use strict"; var yield;',
            '\'use strict\'; +protected;',
            // "function* a(){ (b = yield c) => 1; }",
            'function a(){ c: while(1) continue b; }',
            // "a: while (true) { (function () { break; }); }",
            'for(const a;;);',
            //"!{ a(let) { 'use strict'; } }",
            ' const a;',
            ' function a(eval) {\'use strict\';}',
            '" function a() { "use strict"; var interface; }',
            'function a() { "use strict"; private = 1; }',
            //"class a { *constructor() {} }",
            //" function a() {'use strict'; arguments--; }",
            // "try {} catch ({a: b, c: b}) {}",
            // "b: while(1) { function a(){ continue b; } }",
            ' do b: function a(){} while (1);',
            //"'use strict'; ({eval = 1} = 2);",
            'function a() { "use strict"; var implements; }',
            'function a([yield,...a]){ \'use strict\'; }',
            //"'use strict'; function a(b, ...[b]){}",
            // "function* a(){ function* b({c = yield}){} }",
            'while(1) b: function a(){}',
            //"([a],...a)=>1",
            'function a(){ \'use strict\'; function a(yield){}}',
            // " 'use strict'; [eval] = 1",
            'for(const a in b) d: function c(){}',
            'function a() { \'use strict\'; let = 1; }',
            ' for(0 of 0);',
            ' [...new a] = 0;',
            ' for(const a = 1, let = 2;;);',
            //" function a(b, [b]){}",
            ` function a() { "use strict"; private = 1; }`,
            `for((0) in 0);`,
            ` for(const a in b) d: function c(){}`,
            ` /./ii`,
            `(a, ...b)`,
            `(((a, ...b)))`,
            `[...{a: 0}] = 0;`,
            `for({a: 0} of 0);`,
            `for((0) in 0);`,
            `do label: function f(){} while (0)`,
            `label: continue label;`,
            `label: while(0) !function(){ continue label; };`,
        ];

        for (const arg of programs) {
            it(`${arg}`, () => {
                t.throws(() => {
                    parse(`${arg}`, undefined, Context.Empty);
                });
            });
        }
    });
});