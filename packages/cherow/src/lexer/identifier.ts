import { Token, descKeywordTable } from '../token';
import { State } from '../types';
import { nextChar } from './common';

export const enum CharType {
  IDStart,
  Zero,
  Number,
  Invalid,
  LineTerminator,
  Exclamation,
  OpenParen,
  CloseParen,
  OpenBracket,
  CloseBracket,
  Comma,
  Colon,
  Question,
  Tilde,
  Quote,
  BackQuote,
  Dot,
  Slash,
  BackSlash,
  Semicolon,
  OpenBrace,
  CloseBrace,
  Add,
  Sub,
  Multiply,
  Modulo,
  And,
  Xor,
  Or,
  Less,
  Greater,
  Equal,
  WhiteSpace,
  PrivateName
}

const LatinLetters = [
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.WhiteSpace,
  CharType.LineTerminator,
  CharType.WhiteSpace,
  CharType.WhiteSpace,
  CharType.LineTerminator,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.WhiteSpace,
  CharType.Exclamation,
  CharType.Quote,
  CharType.Invalid,
  CharType.IDStart,
  CharType.Modulo,
  CharType.And,
  CharType.Quote,
  CharType.OpenParen,
  CharType.CloseParen,
  CharType.Multiply,
  CharType.Add,
  CharType.Comma,
  CharType.Sub,
  CharType.Dot,
  CharType.Slash,
  CharType.Zero,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Number,
  CharType.Colon,
  CharType.Semicolon,
  CharType.Less,
  CharType.Equal,
  CharType.Greater,
  CharType.Question,
  CharType.PrivateName,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.OpenBracket,
  CharType.BackSlash,
  CharType.CloseBracket,
  CharType.Xor,
  CharType.IDStart,
  CharType.BackQuote,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.OpenBrace,
  CharType.Or,
  CharType.CloseBrace,
  CharType.Tilde,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.WhiteSpace,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.IDStart,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.IDStart,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.IDStart,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.Invalid,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.Invalid,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.Invalid,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart,
  CharType.IDStart
];

export function scanIdentifier(state: State): Token {
  while (LatinLetters[nextChar(state)] <= CharType.Number) {}
  state.tokenValue = state.source.slice(state.startIndex, state.index);
  return descKeywordTable[state.tokenValue] || Token.Identifier;
}
