import * as t from 'assert';
import { verifyRegExpPattern,  } from '../../src/lexer/regexp';
import { createParserObject } from '../../src/parser/parser';
import { RegexState } from '../../src/lexer/common';
import { Context } from '../../src/common';
import { Token, tokenDesc } from '../../src/token';

function isValidAlphaEscapeInAtom(s: any): any {
    switch (s) {
        // ClassEscape[U] :: b
        case "b":
            // ControlEscape :: one of f n r t v
        case "f":
        case "n":
        case "r":
        case "t":
        case "v":
            // CharacterClassEscape :: one of d D s S w W
        case "d":
        case "D":
        case "s":
        case "S":
        case "w":
        case "W":
            return true;
        default:
            return false;
    }
}

describe('Lexer - Regeular expressions', () => {

    function isSyntaxCharacter(c: string): boolean {
        switch (c) {
            case "^":
            case "$":
            case "\\":
            case ".":
            case "*":
            case "+":
            case "?":
            case "(":
            case ")":
            case "[":
            case "]":
            case "{":
            case "}":
            case "|":
                return true;
            default:
                return false;
        }
    }

    function isAlphaDigit(c: any): any {
        return ("0" <= c && c <= "9") || ("A" <= c && c <= "Z") || ("a" <= c && c <= "z");
    }

    function isAlpha(c: any) {
        return ("A" <= c && c <= "Z") || ("a" <= c && c <= "z");
    }

    describe('Test262', () => {

        for (var cu = 0x00; cu <= 0x7f; ++cu) {
            const s = String.fromCharCode(cu);
            if (!isAlphaDigit(s) && !isSyntaxCharacter(s) && s !== "/") {
                it(`scans '[\\c${s}]/u'`, () => {
                    const parser = createParserObject(`[\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);

                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        }

        for (cu = 0x61 /* a */ ; cu <= 0x7a /* z */ ; ++cu) {
            const s = String.fromCharCode(cu);
            if (!isValidAlphaEscapeInAtom(s)) {
                it(`scans '[\\c${s}]/u'`, () => {
                    const parser = createParserObject(`[\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Valid,
                    });
                });
            }
        }

        for (cu = 0x00; cu <= 0x7f; ++cu) {
            var s = String.fromCharCode(cu);

            if (!isAlpha(s)) {

                it(`scans '[\\c${s}]/u'`, () => {
                    const parser = createParserObject(`[\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);

                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        }

        for (cu = 0x00; cu <= 0x7f; ++cu) {
            const s = String.fromCharCode(cu);
            if (!isAlphaDigit(s) && !isSyntaxCharacter(s) && s !== "/") {
                it(`scans '\\c${s}]/u'`, () => {
                    const parser = createParserObject(`\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        }

        for (cu = 0x41 /* A */ ; cu <= 0x5a /* Z */ ; ++cu) {
            const s = String.fromCharCode(cu);
            if (!isValidAlphaEscapeInAtom(s)) {
                it(`scans '\\c${s}]/u'`, () => {
                    const parser = createParserObject(`\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        }

        for (cu = 0x61 /* a */ ; cu <= 0x7a /* z */ ; ++cu) {
            const s = String.fromCharCode(cu);
            if (!isValidAlphaEscapeInAtom(s)) {
                it(`scans '\\c${s}]/u'`, () => {
                    const parser = createParserObject(`\\c${s}]/u`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        }

        describe('Unicode restricted octal escape', () => {

            const failuresss = [
                '\\1/u',
                '\\3/u',
                '\\4/u',
                '\\155/u',
                '\\231/u',
                '\\41/u',
                '[\\1]/u',
                '[\\3]/u',
                '[\\001]/u',
                '[\\3]/u',
                '\\00/u',
                '\\001/u',
                '\\003/u',
                '\\03/u',
                '\\09/u',
                '\\08/u',
                '\\0055/u',
                '\\000001/u',
            ];

            for (const arg of failuresss) {
                it(`${arg}`, () => {
                    const parser = createParserObject(`${arg}`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Invalid,
                    });
                });
            }
        });

        describe('Misc Test262 cases', () => {

            const Test262Cases = [
                '|()/',
                '\\d{3}|[a-z]{4}/',
                's$/',
                's$/m',
                '^[^p]/m',
                '^ab/',
                '^..^e/',
                '^\\^+/',
                '\\bp/',
                'e\\b/',
                '\\bso/',
                '[f-z]e\\B/',
                '\\Bo\\B/i',
                '\\B\\w\\B/',
                '\\B\\w/',
                '\\B\\w{4}\\B/',
                '^^^^^^^robot$$$$/',
                '\\B\\B\\B\\B\\B\\Bbot\\b\\b\\b\\b\\b\\\\b\\b/',
                '^.*(:|$)/',
                'bx{0,93}c/',
                '\\d{2,4}/',
                'b{2,3}c/',
                'd+/',
                '[a-b]?/',
            ];

            for (const arg of Test262Cases) {
                it(`${arg}`, () => {
                    const parser = createParserObject(`${arg}`, undefined);
                    const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                    t.deepEqual({
                        state,
                    }, {
                        state: RegexState.Valid,
                    });
                });
            }
        });
    });

    describe('Unicode restricted quantifiable assertion', () => {

        const failuresss = [
            '(?=.)*/u',
            '(?=.)+/u',
            '(?=.)*?/u',
            '(?=.){1}/u',
            '(?=.){1,}/u',
            '(?=.){1,2}/u',
            '(?=.)*?/u',
            '(?=.)??/u',
            '(?=.){1}?/u',

        ];

        for (const arg of failuresss) {
            it(`${arg}`, () => {
                const parser = createParserObject(`${arg}`, undefined);
                const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                t.deepEqual({
                    state,
                }, {
                    state: RegexState.Invalid,
                });
            });
        }
    });

    describe('Sloppy mode', () => {

        const failuresss = [
            '|a/',
            'a|/',
            '|/',
            'a||/',
            '^abc/',
            'abc$/',
            'a.c/',
            'abc^abc/',
            '$/',
            '$abc/',
            'abc$abc/',
            'a+/',
            'a?/',
            'a*/',
            'a*b/',
            'a?b/',
            'a+b/',
            'a??/',
            'a{0}/',
            'a{1}/',
            'a{11}/',
            'a{0,}/',
            'a{2,2}/',
            'a{3,3}/',
            'a{4,4}/',
            'a{56,60}/',
            'a{,6}/',
            'a{,49}/',
            'a{,6}/',
            'a{67,71}/',
            'a{7,72}/',
            'a{89,}/',
            'a{9,}/',
            'a{89}/',
            'a{4}/',
            'foo/y',
            '\\t/',
            '\\S/',
            '\\s/',
            '\\n/',
            '\\f/',
            '\\D/',
            '\\]/',
            '\\{/',
            '\\}/',
            '\\|/',
            'abc\\}/',
            'abc\\|/',
            '\\[def/',
            '\\?def/',
            '\\(def/',
            'abc\\?/',
            'abc\\(/',
            'abc\\+/',
            '\\+def/',
            'abc\\./',
            'abc\\*/',
            'abc\\+/',
            'abc\\?/',
            'abc\\\\/',
            '$/',
            './',
            'a|(|)/',
            'a|(|)/',
            '\\cG/',
            '\\ca/',
            '\\cs/',
            '\\co/',
            '\\cN/',
            '(\\1|a)/',
            '(a|\\1)/',
            '(a\\1b)/',
            '0\\1(a)/',
            '4\\1(a)/',
            '\\1x(a)/',
            '(\\1)/',
            'a\\0b/',
            '(a)\\0/',
            `d+/`,
            `d+/`,
            'a*/',
            'a*b/',
            'a?b/',
            'a+b/',
            'a??/',
            'a{0}/',
            'a{11}/',
            'a{0,0}/',
            'a{1,16}/',
            'a{23,37}/',
            'a{34,48}/',
            'a{56,60}/',
            'a{67,71}/',
            'a{89,93}/',
            'a{,50}/',
            '(?=a){0}/gm',
            '(?=a){1}/gm',
            '(?!a){0}/gm',
            '^(?=a)?b$/',
            '(?!a){1}/gm',
            'n^/gm',
            'a+/gm',
            'a?/gm',
            'a|/gm',
            'a\_/',
            'a\_/',
            'a\_/',
            'x\\ubcde\\ubcde\\udebcy/',
            'x\\u0567\\udc10\\udc10/',
            '\\uf89a\\udd00\\udd00y/',
            'x\\ubcde\\udebc\\udebcy/',
            '\\ud800\\ud800\\udc00/',
            'x\\ud810\\ud810\\udc10/',
            '\\ud900\\ud900\\udd00y/',
            'x\\udabc\\udabc\\udebcy/',
            'x\\udabc\\udebc\\udebcy/',
            '\\ud900\\udd00\\udd00y/',
            'x\\ud810\\udc10\\udc10/',
            '\\ud800\\udc00\\udc00/',
            '\\ud800\\udc00\\ud800/',
            'x\\ud810\\udc10\\ud810/',
            'a(a(b)c)/',
            '(a(b)c)c/',
            'a(a(b)c)c/',
            'a((b)c)c/',
            '((b)c)c/',
            'a((b)c)/',
            '((b)c)/',
            'a(?:b)c/',
            'a(?:a(?:b)c)/',
            '(?:a(?:b)c)c/',
            'a(?:a(?:b)c)c/',
            'a(?:a(?:b)c)/',
            '(?:a(?:b)c)/',
            'a(?:(?:b)c)c/',
            '(?:(?:b)c)c/',
            'a(?!a(?!b)c)/',
            '(?!a(?!b)c)c/',
            'a(?=a(?=b)c)c/',
            'a(?!a(?!b)c)c/',
            '(?=a(?=b)c)/',
            'a(?=a(?=b)c)/',
            '(?=(?=b)c)c/',
            'a(?=(?=b)c)c/',
            '(?=a(?=b)c)/',
            '(?=(?=b)c)/',
            'a(?=a(?=b))c/',
            'a(?:a(?:b))c/',
            '(?:(?:b)c)/',
            'a(?:(?:b)c)/',
            '(?:(?:b)c)c/',
            'a(?:(?:b)c)c/',
            '(?:a(?:b)c)/',
            'a(?:a(?:b)c)/',
            '(?!a(?!b)c)/',
            'a(?!a(?!b)c)/',
            '(?!a(?!b)c)c/',
            '(?!a(?!b))c/',
            '(?!a(?!b))/',
            'b{8,}c/',
            '\\d{1,}/',
            '(123){1,}/',
            // '^a-zA-Z]*$/',
            // '^a-zA-Z]*$/',
            // '^0-9]+$/',
            // '\\/',
            '\\v/',
            '()|/',
            'a{0}/',
            'a{11}/',
            'a{1}/',
            'a{2}/',
            'a{3}/',
            'a{89}/',
            'a{9,}/',
            'a{3,38}/',
            'a{1}?/',
            'a+?/',
            'a*?/',
            'a{1,2}/',
            //        '^-J]/ug',
            //'^-fdsasgJ]/g',
            'oo/i',
            '\\D/',
            '\\f/',
            '\\s/',
            '\\t/',
            '\\v/',
            '\\W/',
            '\\rabcd/',
            '\\tabcd/',
            '\\vabcd/',
            '\\sabcd/',
            'abc\\s/',
            'abc\\S/',
            'foo/',
            '[a-]/',
            '[\\b]/',
            '[a\\bc]/',
            '[\\bc]/',
            '[--0]/',
            '[-+]/',
            '[+-]/',
            '[---+]/',
            '[---0]/',
            '[-]/',
            '[--]/',
            '[---]/',
            '[----]/',
            '[------]/',
            '[---------]/',
            'a(b)/',
            '()/',
            '(?:b)/',
            'a(?:b)/',
            '(?:b)c/',
            '(?=b)/',
            '(?!b)/',
            'a(?!b)/',
            'a(?!b)c/',
            'a(?!b(?:c)d)e/',
            'a(?!b(?=c)d)e/',
            'a(?!b(?!c)d)e/',
            '(?!.)*/',
            '(?!.)?/',
            '(?!.){1}/',
            'a|ab/',
            '((a)|(ab))((c)|(bc))/',
            '\\d{3}|[a-z]{4}/',
            '\\d{3}|[a-z]{4}/',
            'ab|cd|ef/i',
            'ab|cd|ef/',
            's$/',
            'e$/',
            '[^o]t\\b/i',
            '\\d{2,4}/',
            '^.*(:|$)/',
            '^.*?/',
            '^.*?$/',
            '.?.?.?.?.?.?.?/',
            '\\??\\??\\??\\??\\??/',
            'ab?c?d?x?y?z/',
            '((((((((((A))))))))))\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10/',
            '[d-h]+/',
            '[1234567].{2}/',
            '[^a-z]{4}/',
            '.[\\b]./',
            'c[\\b]{3}d/',
            '\\Bo\\B/i',
            '[f-z]e\\B/',
            '\\Bevil\\B/',
            '[1234567].{2}/',
            '^^^^^^^robot$$$$/',
            '[^a-z]{4}/',
            '[d-h]+/',
            '[1234567].{2}/',
            '\\B\\w{4}\\B/',
            '[^a-z]{4}/',
            '[d-h]+/',
            '[1234567].{2}/',
            '\\B[^z]{4}\\B/',
            '[^a-z]{4}/',
            '[d-h]+/',
            '[1234567].{2}/',
            '\\B\\w/',
            '[^a-z]{4}/',
            '((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/',
            '[]a/',
            'q[ax-zb](?=\\s+)/',
            '[^a-z]{4}/',
            'c[\\b]{3}d/',
            '[a-z]+/',
            '([xu]\\d{2}([A-H]{2})?)\\1/',
            '([xu]\\d{2}([A-H]{2})?)\\1/',
            '(?=)/',
            'a*?/',
            'a+?/',
            'a+?/',
            'a??/u',
            'a{1,}?/',
            'a{1,}?/u',
            'a{1,2}?/',
            '(?:b)/',
            'a(?:b)/',
            '\\bot/',
            '^([a-z]+)*[a-z]$/',
            '.+/',
            '.*a.*/',
            '[a-z]+/',
            '\\b(\\w+) \\1\\b/',
            '([xu]\\d{2}([A-H]{2})?)\\1/',
            '(123){1,}x\\1/',
            '(\\.(?!com|org)|\\/)/',
            '(?!a|b)|c/',
            '(?=(a+))/',
            'o+/',
            'Java(?!Script)([A-Z]\\w*)/',
            'b{2,}c/',
            '^.*?(:|$)/',
            '^.*(:|$)/',
            'b{2,3}c/',
            '^.*?$/',
            '\\B\\B\\B\\B\\B\\Bbot\\b\\b\\b\\b\\b\\b\\b/',
            '\\w{3}\\d?/',
            '^\\^+/',
            'xyz|.../',
            '(.)..|abc/',
            '.+: gr(a|e)y/',
            '(a)|(b)|(c)|(d)/',
            '()|/',
            '(?=.){1}/',
            '(?!.){1}/',
            '(?!.)?/',
            '(?!.)+/',
            '(?!.)*/',
            'a(?!b(c)d)e/',
            'a(?!b(?:c)d)e/',
            'a(?!b(?=c)d)e/',
            'a(?!b(?!c)d)e/',
            'a(b(c)d)e/',
            'a(b(?:c)d)e/',
            'a(b(?=c)d)e/',
            'a(b(?!c)d)e/',
            'a(?:b(c)d)e/',
            'a(?:b(?:c)d)e/',
            'a(?:b(?=c)d)e/',
            'a(?:b(?!c)d)e/',
            '(?:(?:b))/',
            '(?:a(?:b))/',
            'a(?:a(?:b)c)c/',
            '(?:a(?:b)c)c/',
            'a(?:(?:b)c)c/',
            '(?:(?:b)c)c/',
            'a(?:(?:b)c)/',
            '(?:(?:b)c)/',
            'a(?:a(?:b))c/',
            'a(?:a(?:b))/',
            'a(?:b)c/',
            'a((b)c)c/',
            'a((b)c)c/',
            'a((b)c)c/',
            'a((b)c)c/',
            'a((b)c)c/',
            'a((b)c)/',
            '((b)c)/',
            'a(a(b))c/',
            '(a(b))c/',
            'a(a(b))/',
            '[\\ud900y]/',
            '(?=.)*/',
            '(?=.)+/',
            '(?=.)?/',
            '(?=.){1}/',
            '[F]/',
            '[G]/',
            '[I]/',
            'x\\udebc\\udebcy/',
            '\\udd00\\udd00y/',
            'x\\ud810\\udc10/',
            '\\ud800\\udc00/',
            '\\udc00\\udc00/',
            '\\ud900\\ud900y/',
            'x\\ud810\\ud810/',
            'x\\udabcy/',
            '\\u1234/',
            '\\cG/',
            '\\cg/',
            '\\cw/',
            '\\cZ/',
            '\\cW/',
            '\\cV/',
            '\\cT/',
            '\\cS/',
            '\\cQ/',
            '\\cR/',
            '\\cS/',
            '\\cq/',
            '\\cr/',
            '\\cs/',
            '\\ct/',
            'abc\\wdeff/',
            'abc\\tdeff/',
            'abc\\vdeff/',
            'abc\\Wdeff/',
            '\\Wabcd/',
            'abc\\vdeff/',
            'abc\\wdeff/',
            'abc\\Wdeff/',
            '\\u00c5/ui',
            '\\u212b/ui',
            '\\ud801\\udc00/ui',
            '\\u1f8d/',
            '(.)\\1\\1/',
            '(.)\\1/ui',
            '\\u00e5\\u00e5\\u00e5/ui',
            'AB\\u{10400}/ui',
            '(.)\\1/ui',
            '\\u{12345}{3}/u',
            '\\ud808\\udf45{3}/u',
            '\\u{12345}{3}/u',
            '(.)\\1/ui',
            '(.)\\1/ui',
            '[\\u{62}-\\u{00000066}]oo/u',
            '[\\u{62}-\\u{00000066}]oo/u',
            //            '\\\\8/u',
            '\\u{12345}/u',
            '\\u{12345}\\u{23456}/u',
            //'\\u{12345}(?:\\u{23456})/u',
            '\\u{12345}|\\u{23456}/u',
            '(\\u{12345}|\\u{23456}).\\1/u',
            '\\u{12345}{3}/u',
            '\\u{12345}|\\u{23456}/u',
            '\\u{12345}/u',
            '\\u{12345}{3}/u',
            '\\ud808\\udf45{3}/u',
            '\\u{12345}{3}/u',
            '[\\u0062-\\u0066]oo/',
            '(?=a){0}/',
            '(?=a){1}/',
            '(?!a){0}/',
            '(?!a){1}/',
            '\\n$/',
            'a\z/',
            '\_/',
            './',
            'a./',
            'a*/',
            'a?/',
            'a??/',
            'a||/',
            '|/',
            'a|/',
            '|a/',
            'a|b/',
            'abc/',
            '\\tabcd/',
            '\\Sabcd/',
            'abc\\v/',
            'abc\\w/',
            'abc\\W/',
            'foo/gmi',
            'foo/mi',
            'a{9,94}/',
            'a{6,61}/',
            'a{5,50}/',
            'a{2,27}/',
            'a{0,15}/',
            'a{,38}/',
            'a{,49}/',
            'a{,72}/',
            'a{,83}/',
            'a{9,9}/',
            'a{0,}/',
            'a{9,}/',
            'a{2,}/',
            'a{67}/',
            'a{34}/',
            'a{11}/',
            'a{4}/',
            'a{2}/',
            'a{0}/',
            'a{0,0}/',
            '\\cu/',
            '\\cv/',
            '\\cx/',
            '\\cy/',
            '\\cz/',
            '\\x4e/',
            '\\x3d/',
            '\\x23/',
            '\\xCD/',
            '\\xEF/',
            '\\x6A/',
            '\\x5f/',
            '\\xc3/',
            '\\x12/',
            '\\x90/',
            '\\x23/',
            '\\x89/',
            'a\\0b/',
            '(a)\\0/',
            '(1\\0)/',
            '\\0/',
            '\\0b/',
            'a\\0/',
            '(a|\\1)/',
            '\\1|(a)/',
            '4\\1(a)/',
            '\\1x(a)/',
            '(a)\\1/',
            '\\x89/',
            '(\\0)/',
            '(1\\0)/',
            'a\\0b/',
            '\\0/',
            '(a)\\1/',
            '((a))\\2/',
            '(((((a)))))\\4/',
            '((((((((((((((((((a))))))))))))))))))\\17/',
            '(((((((((((((((a)))))))))))))))\\14/',
            '((((((((((((((((((((a))))))))))))))))))))\\20/',
            '((((((((((a))))))))))\\10/',
            'x\\u0567/',
            '\\uf89ay/',
            'x\\ubcdey/',
            '\\u1234\\u1234\\udc00/',
            'x\\u0567\\u0567\\udc10/',
            '(?=)/',
            '[]b/',
            'a[]b/',
            'a[]/',
            '[]/',
            '[Y]/',
            '[x]/',
            '[y]/',
            '[Z]/',
            '[K]/',
            '[k]/',
            '[g]/',
            '(?=)/',
            '[\\bc]/',
            '[0\\0b]/',
            '[\\0b]/',
            '[a\\0]/',
            '[\\0]/',
            '||||/',
            '||||/',
            '(?!)/',
            '[a-z]+\\d+/',
            '[a-z]+\\d+/',
            '(aa)bcd\\1/',
            '(aa).+\\1/',
            'q[ax-zb](?=\\s+)/',
            'b{0,93}c/',
            '[]a/',
            '[^]a/m',
            'a[^]/',
            '1?1/mig',
            '\\u0042/i',
            '.[\\b]./',
            '[^a-z]{4}/',
            'a[^b]c/',
            'a[^1-9]c/',
            '<body.*>((.*\\n?)*?)<\\/body>/i',
            '^(([a-z]+)*([a-z])\\.)+[a-z]{2,}$/',
            '[1234567].{2}/',
            'a[^b]c/',
            '.*a.*/',
            '[a-z]+\\d+/',
            '(aa)bcd\\1/',
            '(a)?a/',
            '^(A)?(A.*)$/',
            'a|(b)/',
            '(a)?(a)/',
            'abc\\Sdeff/',
            '\\rabcd/',
            '\\tabcd/',
            '\\vabcd/',
            '\\sabcd/',
            'abc\\s/',
            'abc\\S/',
            'abc\\W/',
            'abc\\d/',
            '\\$abcd/',
            'abc\\$abcd/',
            'a|(|)/',
            '(((((((((((((a)))))))))))))\\13/',
            'x\\u0567/',
            '\\f/',
            '(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/',
            '(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\10/',
            '(a)\\1/',
            'a{2,27}/',
            '|/',
            '$/',
            './',
            '(?=(a+))a*b\\1/',
            'java(script)?/',
            'x?y?z?/',
            'x?ay?bz?c/',
            '\\bop/',
            'op\\b/',
            '^ab/',
            '^..^e/',
            '^m/m',
            'es$/mg',

            //'^ぁ-んー]*$/',
            '(\\0)/',
            '\\0/',
            '(a)\\0/',
            '(((((a)))))\\4/',
            '((((((a))))))\\6/',
            '((((((((((((a))))))))))))\\11/',
            '(((((((((((((((a)))))))))))))))\\14/',
            '((((((((((((((((((a))))))))))))))))))\\17/',
            '((((((((((((((((a))))))))))))))))\\16/',
            '\\ud900y/',
            'x\\udabcy/g',
            'x\\udebcy/g',
            'x\\ubcde\\udabcy/',
            'x\\ubcde\\udebcy/',
            '\\uf89a\\uf89a\\udd00y/',
            'x\\u0567\\u0567\\udc10/',
            '\\u1234\\u1234\\udc00/',
            '\\u1234\\ud800/',
            'x\\udc10\\udc10/',
            '\\ud900\\udd00\\ud900y/',
            'x\\udabc\\udabc\\udebcy/',
            'x\\ubcde\\udebc\\udebcy/',
            'x\\ud810\\udc10\\ud810/',
            'x\\u0567\\udc10/',
            '\\u1234\\udc00\\udc00/',
            '\\ud800\\udc00\\udc00/',
            '[]b/',
            'a[]b/',
            'a[]/',
            '[]/',
            '[^]/',
            'a[^]/',
            '[^]b/',
            '[F]/',
            '[K]/',
            '[M]/',
            '[N]/',
            '[S]/',
            '[T]/',
            '[V]/',
            '[U]/',
            '[R]/',
            '[Q]/',
            '[N]/',
            '[M]/',
            '[L]/',
            '[G]/',
            '[a\\0b]/',
            '[0\\0b]/',
            '[1\\0b]/',
            '[\\v]/',
            '[\\w]/',
            '[\\t]/',
            '[\\S]/',
            '[\\n]/',
            '[\\f]/',
            '[\\vabcd]/',
            '[\\wabcd]/',
            '[abc\\$abcd]/',
            '[\\[]/',
            '[\\]]/',
            '[\\x7d]/',
            '[\\x89]/',
            '[\\x5c]/',
            '[\\x45]/',
            '[\\xb4]/',
            '\\b0[0-7]*\\b/',
            '[?@_\[\]^\\]/',
            '\\\^[A-Z?@_\[\]^\\]/',
            '0x[a-fA-F\\d]{2}/',
            //'(^\R+)|(\R+$)|(\R(?=\R{2}))/u',
            '[ -~]/',
            //'s/[^\\040-\\176]/ /g/',
            //'s/[\\000-\\037]/ /g/',
            '\\d\.\\d/',
            '[\\[\\]]/',
            '\\b0[0-7]*\\b/',
            '^(a*).*\\1$/',
            '^\\w+$/',
            '^\\w+$/u',
            '[^\\x00-\\x7F]+/',
            '([^\\x00-\\x7F]|\\w)+/',
            '^[^\\x20-\\x7e]*$/',
            "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/",
            '^^[ｧ-ﾝﾞﾟ\\-]*$/u',
            '^[^\\x20-\\x7e]*$/',
            //'^-?([1-9][0-9]*|0)(\\.[0-9]+)?$/u',
            '^\\d{3}-\\d{4}$/u',
            '[\\u{1}-\\u{2}]/u',
            // '\\u0000-\\s]/',
            '^\\d{3}-\\d{4}$/u',
            '\\b\\w+(e)?s(\\s|$)/',
            '\\b(\\S+)\\s?/',
            //  '[\\x{370}-\\x{3FF}](?:[^[:L*:]]|[\\x{370}-\\x{3FF}])*/',
            '([a-z]*)( *)?:( *)?([\'\"`])([^,\\n]*)\\4/',
            // '\\479/',
            '[\\u0000-\\u001fehlo\\u007f-\\u009f\\u00ad\\u0600-\\u0603\\u06dd\\u070f\\u17b4-\\u17b5\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u206a-\\u206f\\ufeff\\ufff9-\\ufffb]|\\ud834[\\udd73-\\udd7a]|\\udb40[\\udc01\\udc20-\\udc7f]/',
            '[0-9fo٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꩐-꩙０-９]|\\ud801[\\udca0-\\udca9]|\\ud835[\\udfce-\\udfff]/',
            '[\\u0000-~\\u2000-\\u206e]|\\ud809[\\udc00-\\udc7e]/',
            '[cehorwԀ-\\u052e\\u2000-\\u206e]/',
            '[cehorwЀ-Ӿ\\u2000-\\u206e]/',
            '[^`cehorw¨¯´¸ǅǈǋǲ˂-˅˒-˟˥-˫˭˯-˿͵΄-΅Ѐ-ӾԀ-\\u052eᾈ-ᾏᾘ-ᾟᾨ-ᾯᾼ-᾽᾿-῁ῌ-῏῝-῟῭-`ῼ-῾\\u2000-\\u206e\\u2de0-\\u2dfe゛-゜꜀-꜖꜠-꜡꞉-꞊＾｀￣]/',
            '[^`cehorw¨¯´¸˂-˅˒-˟˥-˫˭˯-˿͵΄-΅᾽᾿-῁῍-῏῝-῟῭-`´-῾゛-゜꜀-꜖꜠-꜡꞉-꞊＾｀￣]/',
            '[+-\/*]/',
            '\\u0041\\u0042\\u0043/',
            '[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/',
            '^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/',
            '^[-+]?[0-9]*\.?[0-9]+$/',
            '\\b[0-9A-F]+\\b/',
            '&H[0-9A-F]+\\b/',
            '\\b[0-9A-F]{4}\\b/',
            'b[^e\\r\\n]*e/',
            '\\b0[xX][0-9a-fA-F]+\\b/',
            '[^aeiou]/',
            '\\b[0-9]+(\.[0-9]+)?(e[+-]?[0-9]+)?\\b/',
            '^0[0-7]*$/',
            '(?![ \\t\\cK\\f])\\s/',
            '[a-zA-ZàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒ]/',
            '\\c\\u0414/',
            '\\c\\u0420/',
            // '^\\777$/',
            '(a)/g',
            '(ab)/g',
            '(ab)|(ac)+/',
            //'[\\u{0}-\\u{1}]/gm',
            '(ab)/g',
            '\\s+/',
            '0a*/',
            '\\c/',
            '[abc\\vdeff]/u',
            'dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g',
            '(\\w+)\\s*,\\s*(\\w+)/',
            '(\\w+)\\s*,\\s*(\\w+)/',
            '[Jj]ava([Ss]cript)?(?=\:)/',
            'a+?/g',
            '(ab)+|(ac)+/',
            '(ab)|(ac)/',
            '(ab)|(ac)+/',
            '(?:ab)+|(?:ac)+/',
            '^([^?]+)/g',
            '(bc)/',
            '[F-e]+/gi',
            '[K-_]+/gi',
            '[a-zA-Z]+/gi',
            '[E-f]+/gi',
            `[|||||||]/`,
            `\\&/`,
            `\\'/`,
            `\\(/`,
            `\\)/`,
            `\\-/`,
            `\\./`,
            `\\.14/`,
            `\\//`,
            `\\0/`,
            `\\:/`,
            `\\</`,
            `\\>/`,
            `\\?/`,
            `\\?>|[\\n\\r\\t ][^?]*\\?+([^>?][^?]*\\?+)*>/`,
            `\\@/`,
            `\\S/`,
            `\\]/`,
            `\\B/`,
            `\\b/`,
            `\\cC/`,

            `\\cD/`,
            `\\cF/`,
            `\\cG/`,
            `\\cH/`,
            `\\cK/`,
            `\\cM/`,
            `\\cO/`,
            `\\cS/`,
            `\\cV/`,
            `\\cY/`,
            `\\cb/`,
            `\\cf/`,
            `\\cg/`,
            `\\ch/`,
            `\\cj/`,
            `\\ck/`,
            `\\cl/`,
            `\\cm/`,
            `\\cn/`,
            `\\co/`,
            `\\cp/`,
            `\\cs/`,
            `\\cu/`,
            `\\cy/`,
            `\\cz/`,
            `\\u1234/u`,
            `a/`,
            `a*/`,
            `a[a-z]{2,4}/`,
            `abc/`,
            `\\</`,
            `a[a-z]{2,4}?/`,
            `abc{1}/`,
            `a|b/`,
            `a|bc/`,
            `a|b|[]/`,
            `a|b|c/`,
            `d+/`,
            `e{1}/`,
            `e{2,}/`,
            `ll|l/`,
            `nd|ne/`,
            `null/`,
            `t[a-b|q-s]/`,
            `true/`,
            `undefined/`,
            `x/`,
            `x(?=y)/`,
            `|/`,
            `|.|/`,
            `(\\1)+\\1\\1/`,
            `(\\1)a/`,
            `(\\2)(b)a/`,
            `\\u{000000}/u`,
            `\\u{0000000000000000000}/u`,
            `\\u{0000000000000000000}/u`,
            `\\u{003}/u`,
            `\\u{1D306}/u`,
            `\\u{01D306}/u`,
            `\\u{10FFFF}/u`,
            `[\\u{0}-\\u{A}]/u`,
            '(z)((a+)?(b+)?(c))*/',
            'A?B/',
            '(?:x)/',
            'AL|se/',
            'B/',
            '\\f\\n/',
            `[ \\f\\n]/`,
            '[ \\n\\t\\r]+/',
            '[^-]*-/',
            '[^-]*-([^-][^-]*-)*-/',
            '[^-]*-([^-][^-]*-)*->?/',
            '[^<]+/',
            `[a-]/`,
            `[a-b]/`,
            '((b)c)c/u',
            'a((b)c)c/u',
            '(a(b)c)/u',
            'a(a(b)c)/u',
            '(a(b)c)c/u',
            'a(a(b)c)c/u',
            '[---]/u',
            '[-----]/u',
            '[\\x01-\\x17]/u',
            '[\\u0001-\\x17]/u',
            '[\\x01-\\u0007]/u',
            '[\\cx]/u',
            '[\\cw]/u',
            '[\\cu]/u',
            'a()\\1/',
            `[^<\"]*\"|'[^<']*'/`,
            '$sup/',
            '(((hello)))/',
            '((1)|(12))((3)|(23))/',
            '(.)\\1/',
            '(?:)/',
            '(?:ab|cd)\\d?/',
            '(?:x)/',
            '([A-Za-z_:]|[^\\x00-\\x7F])([A-Za-z0-9_:.-]|[^\\x00-\\x7F])*/',
            `([A-Za-z_:]|[^\\x00-\\x7F])([A-Za-z0-9_:.-]|[^\\x00-\\x7F])*([ \\n\\t\\r]+([A-Za-z_:]|[^\\x00-\\x7F])([A-Za-z0-9_:.-]|[^\\x00-\\x7F])*([ \\n\\t\\r]+)?=([ \\n\\t\\r]+)?(\"[^<\"]*\"|'[^<']*'))*([ \\n\\t\\r]+)?/`,
            '([A-Za-z_:]|[^\\x00-\\x7F])([A-Za-z0-9_:.-]|[^\\x00-\\x7F])*([ \\n\\t\\r]+)?>?/',
            '([Nn]?ever|([Nn]othing\\s{1,}))more/',
            '(\\1)/',
            '(\\d+)/',
            '(a)*/',
            '(aa|aabaac|ba|b|c)*/',
            '(x)/',
            'f$/g',
            '(\\w+)\\s*,\\s*(\\w+)/',
            '(?:\\\\.|[\\w-]|[^\\0-\\xa0])+/',
            //'^h\\d$/i/',
            '[a-dk-lx-z]+/g',
            '[\[\}]+/g',
            '[@-k]+/g',
            '[0-_]+/g',
            '[A-a]+/g',
            '[X-kK-b]+/g',
            '^\\s{2,}|\\s{3,}$/g',
            '^e/gm',
            '[abc]+/gi',
            '[E-fk-o]+/gi',
            '[a-dk-lx-z]+/gi',
            '[\[\}]+/gi',
            '[0-\}]+/gi',
            '[A-z]+/gi',
            '[@-k]+/gi',
            '[0-_]+/gi',
            '[X-kK-b]+/gi',
            '[9-k]+/g',
            '[utg]/',
            'a+?/g',
            '[0-K]+/g',
            '[5-\}]+/g',
            '[E-f]+/g',
            '^(?:input|select|textarea|button)$/i',

            //'[A-\\cH]/u',
            '[\\cH-Z]/u',
            '(a(b)c)c/u',
            'a(a(b)c)c/u',
            `[a-b]?/`,
            `[^a]*/`,
            `[a-c]*/`,
            `[a-z]n/`,
            `[a]/`,
            '[x\\da-z]/u',
            '[x\\DA-Z]/u',
            `[o-o]/`,
            `[object Math]/`,
            `[z-z]/`,
            `[\uD83D\uDCA9-\uD83D\uDCAB]/u`,
            `[\\uD83D\\uDCA9-\\uD83D\\uDCAB]/u`,
            `[a-b\\uD83D\\uDCA9-\\uD83D\\uDCAB]/u`,
            `[a-b\\uD83D\\uDCA9-\\uD83D\\uDCAB]/u`,
            `[\\uD83D\\uDCA9-\\uD83D\\uDCABa-b]/u`,
            `[\\uD83D\\uDCA9-\\uD83D\\uDCABa-b]/u`,
            `[\\uD83D\\uDCA9\\uD83D\\uDCAB]/u`,
            `"[a-b\\uD83D\\uDCA9\\uD83D\\uDCAB]/u`,
            `[\\uD83D\\uDCA9\\uD83D\\uDCABa-b]/u`,
        ];

        for (const arg of failuresss) {
            it(`${arg}`, () => {
                const parser = createParserObject(`${arg}`, undefined);
                const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                t.deepEqual({
                    state,
                }, {
                    state: RegexState.Valid,
                });
            });
        }

    });


    describe('Unicode', () => {


        const valid = [
            //'(?:a)/u',
            '\\t/u',
            '\\[/u',
            '\\)/u',
            '\\(/u',
            '\\?/u',
            '\\+/u',
            //'\\./u',
            '\\$/u',
            '\\u{a}/u',
            '\\u12345/u',
            '\\[/u',
            '\\)/u',
            '\\(/u',
            '[🌷-🌸]/u',
            '[\\(]/u',
            '[\\$]/u',
            '[-a-]/u',
            '^([0-9]{0,8})$/u',
            '$/u',
            '[^𝌆]/u',
            '[🌷-🌸]/u',
            '[🌷-🌸]/u',
            // '(?!.){1,}?/u',
            // '(?!.){1,2}?/u',
            '\\u{10ffff}/u',
            '[^"]*/u',
            'java(script)?/u',
            'x?y?z?/u',
            'x?ay?bz?c/u',
            //'/(a(b(c)))(d(e(f)))/u',
            'a(..(..)..)/u',
            '\\u0042/ui',
            'a[a-z]{2,4}/u',
            'a[a-z]{2,4}?/u',
            'b{2,3}c/u',
            '((a)|(ab))((c)|(bc))/u',
            '\\d{3}|[a-z]{4}/u',
            '|()/u',
            '()|/u',
            '^p[a-z]/u',
            '^p[b-z]/mu',
            '^..^e/u',
            '^xxx/u',
            '\\Bevil\\B/u',
            '[f-z]e\\B/u',
            '[^"]*/u',
            'java(script)?/u',
            'x?y?z?/u',
            'x?ay?bz?c/u',
            'a(..(..)..)/u',
            '\\u0042/ui',

            '^.*?(:|$)/u',
            '^.*(:|$)/u',
            '\\d{2,4}/u',
            '[^o]t\\b/ui',
            'so\\b/u',
            '\\bso/u',
            '\\bot/u',


            'ot\\b/u',
            '.?.?.?.?.?.?.?/u',
            '[a-z]+\\d+/u',
            '[a-z]+\\d+/u',
            '[a-z]+(\\d+)/u',
            'x*y+$/u',
            '\\d{1,}/u',
            '(.{3})(.{4})/u',
            '(a(b(c)))(d(e(f)))\\2\\5/u',
            '([\\S]+([ \\t]+[\\S]+)*)[ \\t]*=[ \\t]*[\\S]+/u',
            //            '^(([a-z]+)*([a-z])\\.)+[a-z]{2,}$/u',
            '.*a.*/u',

            '[a-z]+/uig',
            'a[^1-9]c/u',
            '[^\\b]+/gu',
            'a[^b-z]\\s+/u',
            '\\w{3}\\d?/u',
            '.{0,93}/u',
            'bx{0,93}c/u',
            '.+/u',
            '\\b\\w{5}\\b/u',
            '^p[b-z]/mu',
            '^ab/u',
            '^xxx/u',
            '^[^p]/um',
            '^p[b-z]/mu',
            '^p[a-z]/u',
            '^m/um',
            '[-a-]/u',
            '[\\d]/u',
            '[\\r]/u',
            '[\\f]/u',
            '[\\w]/u',
            '[\\D]/u',
            '[\\W]/u',
            '[\\D]/u',
            '[\\x123]/u',
            '[\\cA]/u',
            '[\\cz]/u',
            '[\\r]/u',
            // '/(?:B-)|(?:L-L)|(?:L-T)|(?:T-LT)|(?:(?:B|T|^)T-T)/u',
            //'a(b(c)d)e/u',
            //'a(b(?:c)d)e/u',
            //'a(?=b(?:c)d)e/u',
            //'a(?=b(?=c)d)e/u',
            //'a(?=b(?!c)d)e/u',
            //'a(?!b(c)d)e/u',
            //'a(?!b(?:c)d)e/u',
            //'(?=a(?=b)c)c/u',
            //'a(?=a(?=b)c)/u',
            //'a(?=a(?=b))c/u',
            //'(?=(?=b)c)/u',
            //'a(?=(?=b)c)/u',
            //'(?=(?=b)c)c/u',
            //'(?=a(?=b))c/u',
            //'a(?=a(?=b))c/u',
            //'(?!a(?!b)c)c/u',
            //'a(?!a(?!b)c)c/u',
            //'(?!a(?!b)c)/u',
            // 'a(?!a(?!b))c/u',

            '[\\udd00\\udd00y]/u',
            '[\\ud900\\udd00y]/u',
            '[x\\udebcy]/gu',
            '[x\\udabcy]/iuy',
            '[\\uf89ay]/u',
            '[x\\u0567]/u',
            '(b)/u',
            'a(b)/u',
            '(b)c/u',
            'a(b)c/u',
            '()/u',
            //    'a(?:b)c/u',
            //      '(?:b)c/u',
            //        'a(?:b)/u',
            //  '(?:b)/u',
            //          '(?:)/u',
            //'(?=b)/u',
            //            'a(?=b)/u',
            //            '(?=b)c/u',
            //            'a(?=b)c/u',
            //'a(?=a(?=b)c)c/u',
            '[\\xEF]/u',
            '[\\x90]/u',
            '[\\x7D]/u',
            '[\\x67]/u',
            '[\\{]/u',
            '[\\}]/u',
            '[\\]]/u',
            '[\\)]/u',
            '[\\?]/u',
            '[\\+]/u',
            '[\\*]/u',
            '[\\.]/u',
            '[abc\\s]/u',
            '[abc\\t]/u',
            '[abc\\s]/u',
            '[abc\\n]/u',
            '[abc\\f]/u',
            '[abc\\D]/u',
            '[\\u{0000000000000000000010ffff}]/u',
            '[\\u{103456}]/u',
            '[\\u{1234}]/u',
            '[\\u{12}]/u',
            '[\\SA-S]/u',
            '[\\wa-z]/u',
            '[\\DA-Z]/u',
            '[\\da-z]/u',
            '/[A-Z\\Wx]/u',
            '[A-S\\Sx]/u',
            '[a-z\\dx]/u',
            '[1-9]/u',
            '[\\u5000-\\u6000]/u',
            '[\\uD83D\\uDCA9]/u',
            '[\\uD83D\\uDCAB]/u',
            '\\u{01}-\\x07/u',
            '[1-\\u{500}]/u',
            '[--0]/u',
            '[+--]/u',
            '[-]/u',
            '[------]/u',
            '[--------]/u',
            '[---------]/u',
            '[\\u{012345} postfix]/u',
            '\\u{000000003f}/u',
            '[\\uf89a\\ud900y]/u',
            '[x\\u0567\\ud810]/u',
            '[x\\u0567\\udc10]/u',
            '[\\u1234\\udc00]/u',
            '[x\\u0567\\u0567\\udc10]/u',
            '[\\uf89a\\uf89a\\udd00y]/u',
            '[x\\ubcde\\ubcde\\udebcy]/u',
            '[x\\ubcde\\udebc\\udebcy]/u',
            '[x\\ud810\\ud810\\udc10]/u',
            '[x\\ud810\\udc10\\ud810]/u',
            '[prefix \\u{012345}]/u',
            'a(?:b(?=c)d)e/',
        ];

        for (const arg of valid) {
            it(`${arg}`, () => {
                const parser = createParserObject(`${arg}`, undefined);
                const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                t.deepEqual({
                    state,
                }, {
                    state: RegexState.Valid,
                });
            });
        }

        const failures = [
            'a(b(?=c)d)e/u',
            '(?!.)*/u',
            '(?!(?!b)c)/u',
            'a(?!(?!b)c)/u',
            '(?!(?!b))/u',
            '(?=.){1}/u',
            '(?!.){1}/u',
            '(?!.)+/u',
            '(?=.)*/u',
            '(?=.)+/u',
            '(?=.)?/u',
            '(?!)/u',
            'a{100,45}/u',
            'a{1,0}/u',
            'a{0x01,1}/u',
            'a{0x15,02}/u',
            'abc\\_abcd/u',
            '[\\_abcd]/u',
            '[abc\\_abcd]/u',
            '[\\?',
            '[\\(',
            '[\\z]/u',
            '[\\y]/u',
            '[abc\\zdeff]/u',
            '[\\u{000000ffffffffffffffff}]/u',
            '[\\u{0000000000123456789}]/u',
            '[\\u{00000000000000000000120000}]/u',
            '[\\S-S]/u',
            '[\\w-z]/u',
            'a(a(b)',
            '(a(b)',
            '(a(b))',
            'a(?=a(?=b)',
            'a(?=a(?=b))',
            '(?=a(?=b',
            'a(?!a(?!b',
            '(?!a(?!b',
            '(?!(?!b',
            '\\8/u',
            '\\u{xxxx}/u',
            // 'x\\ubcde\\udabcy/u',
            // '(a|\\1)/u',
            '(a|\\1)',
            '(\\1|a)',
            '\\1|(a)',
            '(a)|\\1',
            '4\\1(a)',
            '0\\1(a)',
            '(a\\1b)',
            '(\\07)/u',
            '\\08/u',
            '\\09/u',
            '\\00/u',
            '(a)x\\6/u',
            '(a\\7b)/u',
            '0\\8(a)/u',
            '4\\9(a)/u',
            '(a)|\\10/u',
            '\\11|(a)/u',
            '(a|\\13)/u',
            '4\\9(a)/u',
            '(a)|\\10/u',
            '\\11|(a)/u',
            '(\\12|a)/u',
            'a\\0',
            '\\0b',
            'a\\0b',
            '(a)\\0',
            '\\0(b)',
            '(\\0)',
            '\\06(b)',
            '(\\4)/u',
            '\\5x(a)/u',
            '(a)x\\6/u',
            '(a\\7b)/u',
            '(a)\\3/u',
            '\\2(a)/u',
            '\\x3/u',
            '\\x4/u',
            '\\x6/u',
            'a|(})/u',
            'a|({)/u',
            'a|(])/u',
            'a(?)/u',
            'a(+)/u',
            'a(*)/u',
            'a|+/u',
            'a|?/u',
            'a|)/u',
            'a|]/u',
            'a|{/u',
            'a|}/u',
            '+/u',
            '?/u',
            '\\"/u',
            `\\'/u`,
            `\\\`/u`,
            'abc\\_abcd/u',
            '\\_abcd/u',
            'abc\\_/u',
            '\\_/u',
            'abc\\zdeff/u',
            'abc\\ydeff/u',
            'abc\\qdeff/u',
            'abc\\pdeff/u',
            'abc\\odeff/u',
            '\\zabcd/u',
            'abc\\Q/u',
            'abc\\P/u',
            'abc\\z/u',
            '\\X/u',
            '\\V/u',
            '\\U/u',
            '\\T/u',
            '\\R/u',
            '\\q/u',
            '\\u/u',
            '\\x/u',
            '\\y/u',
            'abc\\L/u',
            'abc\\M/u',
            'abc\\N/u',
            'abc\\O/u',
            'abc\\P/u',
            'abc\\Q/u',
            'abc\\V/u',
            'abc\\U/u',
            'abc\\X/u',
            'abc\\Y/u',
            'abc\\Z/u',
            '\\O/u',
            '\\P/u',
            '\\K/u',
            '\\L/u',
            '\\l/u',
            '\\e/u',
            '\\g/u',
            '\\h/u',
            '\\i/u',
            '\\j/u',
            '\\k/u',
            'abc\\a/u',
            '\\aabcd/u',
            'abc\\Adeff/u',
            'abc\\Cdeff/u',
            'abc\\Edeff/u',
            'abc\\Fdeff/u',
            'abc\\Gdeff/u',
            'abc\\Hdeff/u',
            'abc\\_/u',
            '\\_abcd/u',
            'abc\\_abcd/u',
            'a{0x15,02}/u',
            'a{00,0o01}/u',
            'a{1, 1}/u',
            'a{ 1, 1}/u',
            'a{1 ,1}/u',
            'a{ 1 , 1}/u',
            'a{1,1 }/u',
            'a{1, 1 }/u',
            'a{ 1, 1 }/u',
            'a{ 1 , 1 }/u',
            'a{100,45}/u',
            'a{2,1}/u',
            'a{1,0}/u',
            'a{0x01,1}/u',
            'a{0x15,02}/u',
            'a{0b01,04}/u',
            'a{00,0o01}/u',
            'a++/u',
            'a?+/u',
            'a**/u',
            '?/u',
            '\\x5/u',
            '(((((((a)))))))\\8/u',
            '((((((((((a))))))))))\\11/u',
            '((((((((((((((((((((a))))))))))))))))))))\\21/u',
            '((((((((((((((a))))))))))))))\\15/u',
            '((((((((((a))))))))))\\11/u',
            '\\u{xxxx}/u',
            '\\u{0fail}/u',
            '\\u{afail}/u',
            '\\u{fail}/u',
            '\\u{}/u',
            '\\u{/u',
            '\\u{a/u',
            '\\u{af/u',
            '\\u{012/u',
            '\\u{01234/u',
            '\\u{012345/u',
            '\\u{110000}/u',
            '\\u{00000000000000000000110000}/u',
            'a(?:b(?=cde/u',
            'a(?:b(?!cd)e/u',
            'a(?:b(?!cde/u',
            'a(?=b(cd)e/u',
            'a(?=b(cde/u',
            'a(?=b(?:cd)e/u',
            'a(?=b(?:cde/u',
            'a(?=b(?=cd)e/u',
            'a(?=b(?=cde/u',
            'a(?=b(?!cd)e/u',
            'a(?=b(?!cde/u',
            'a(?!b(c)de/u',
            'a(?!b(cde/u',
            'a(?!b(?:cd)e/u',
            'a(?!b(?:cde/u',
            'a(?!b(?=cd)e/u',
            'a(?!b(?=cde/u',
            'a(?!b(?!cd)e/u',
            'a(?!b(?!cde/u',
            '0{2,1}/u',
            '^[z-a]$/u',
            'a**/u',
            'a++/u',
            'a++/u',
            'x{0,1}{1,}/u',
            '+a/u',
            '??a/',
            '?a/u',
            '\\b*/u',
            '\\B+/u',
            '\\B{1}/u',
            '\\B++/u',
            '\\b?+/u',
            '(?=.)**/u',
            '(?!.)++/u',
            '(?=.)**/u',
            '(?=.){1}+/u',
            '(?!.){1}+/u',
            '(?!.)?+/u',
            '(?=.)++/u',
            '(?=.)**/u',
            '\\ /u',
            '\\:/u',
            '\\;/u',
            '\\v]/u',
            ')/u',
            'a{1,/',
            'a{1,2/',
            'a{}?/',
            'a{1,2?/',
            '\\u/',
            '\\]def]/u',

        ];

        for (const arg of failures) {
            it(`${arg}`, () => {
                const parser = createParserObject(`${arg}`, undefined);
                const { state } = verifyRegExpPattern(parser, Context.OptionsEditorMode);
                t.deepEqual({
                    state,
                }, {
                    state: RegexState.Invalid,
                });
            });
        }
    });
});