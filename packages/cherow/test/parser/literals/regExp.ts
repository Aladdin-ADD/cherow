import { pass, fail } from '../../test-utils';
import { Context } from '../../../src/utilities';
import * as t from 'assert';
import { parseSource } from '../../../src/parser/parser';

describe('Literals - Reggular expression', () => {
  beforeEach(() => console.log = () => {});
  afterEach(() => delete console.log);

    describe('Failure', () => {

        const invalidSyntax = [
            '/(?=/',
            '/a{2,1}/',
            '/(a{2,1}/',
            '/(/',
            '/)/',
            '/^*/',
            '/[\w-e]/',
            '/$*/',
            '/\\2(a)(/',
            '/(?a/',
            '/(?:/',
            '/(?=foo/',
            '/(?!/',
            '/(?!/',
            '/(?!foo/',
            '/(a{2,1}/',
            '/(*)/',
            '/(/',
            '/^(\d+)\s+IN\s+SOA\s+(\S+)\s+(\S+)\s*\(\s*$/',
            '/^\*\.[a-z]([a-z\-\d]*[a-z\d]+)?(\.[a-z]([a-z\-\d]*[a-z\d]+)?)*$/',
            //        "/[/",
            '/^*/',
            '/$*/',
            '/\\2(a)(/',
            '/(?/',
            '/(?a/',
            '/(?a)/',
            '/(?:/',
            '/(?:a/',
            '/(:a/',
            '/[\\c-a]/',
            '/[0-9--+]/',
            '/[\\z-\\a]/',
            '/[\\u0001-\\u0000]/',
            '/[\\u{1}-\\u{2}]/',
            '/[\\u{2}-\\u{1}]/',
            '/[a-b--+]/',
            '/^\s*(\*|[\w\-]+)(\b|$)?/',
            '/[b-a]/',
            '/${2,1}/',
            '/(/',
            '/)/',
            '/(/',
            '/a)/',
            '/(?/',
            '/(?=/',
            '/[\s-:]/',
            '/^[\d-X]*$/',
            '/^[\d-X-Z]*$/',
            '/^[\d-X-Z]*$/',
            '/[\\u0000-\\ud83c\\udf38-\\u0000]/',
            '/[\\u0000-🌸-\\u0000]/',
        ];

        for (const arg of invalidSyntax) {

            it(`${arg}`, () => {
                t.throws(() => {
                    parseSource(`${arg}`, undefined, Context.Empty);
                });
            });
        }
    });

    describe('Pass', () => {

        const invalidSyntax = [
            '/${1,2/u',
            '/foo/u',
            '/foo|bar/u',
            '/(x)(?=\\1)x/',
            '/(.*?)a(?!(a+)b\\2c)\\2(.*)/',
            '/(?=(a+?))(\\1ab)/',
            '/(?=(a+?))(\\1ab)/',
            '/^P([1-6])(?=\\1)([1-6])$/',
            '/(([a-c])b*?\\2)*/',
            '/(x)(?=x)x/',
            '/(x)(?=\\1)x/',
            '/(x)(?=x)x/',
            '/(x)(\\1)/',
            '/(x)(?=\\1)x/',
            '/(x)zzz(?=\\1)x/',
            '/a{2,1?/',
            '/👍🚀❇️/',
            '/(a)\\2/',
            '/(?:a)\\2/',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\10/',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\11/',
            '/$/',
            '/./',
            '/]/',
            '/{/',
            '/}/',
            '/|/',
            '/${1,2/',
            '/\\1/',
            '/(a)\\1/',
            '/a??/',
            '/a+?/',
            '/a{1,/',
            '/a{1,2/',
            '/a{2,1/',
            '/a*?/',
            '/a{1,2}/',
            '/^|$|\\b|\\B/',
            '/(?=foo)/',
            '/a{1,?/',
            '/(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)\\10/',
            '/foo/',
            '/foo/',
            '/foo|bar/',
            '/||||/',
            '/^|$|\\b|\\B/',
            '/^[ｧ-ﾝﾞﾟ\\-]*$/',
            '/^[^\\x20-\\x7e]*$/',
            '/^[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/',
            '/^((4\\d{3})|(5[1-5]\\d{2})|(6011))([- ])?\\d{4}([- ])?\\d{4}([- ])?\\d{4}|3[4,7]\\d{13}$/',
            '/^((4\\d{3})|(5[1-5]\\d{2})|(6011))([- ])?\\d{4}([- ])?\\d{4}([- ])?\\d{4}|3[4,7]\\d{13}$/',
            '/^\\s*|\\s*$/',
            '/^\\s*|\\s*$/',
            '/^\\s*|\\s*$/u',
            '/[\\d][\\12-\\14]{1,}[^\\d]/',
            '/^[ぁ-んー]*$/',
            '/^[ぁ-んー]*$/u',
            '/||||/',
            '/||||/u',
            '/^|$|\\b|\\B/',
            '/(?=foo)/',
            '/\\u1/',
            '/\\u12/',
            '/\\u123/',
            '/\\u1234/',
            '/\\u12345/',
            '/\\u{/',
            '/\\u{z/',
            '/\\u{a}/',
            '/\\u{20/',
            '/\\u{20}/',
            '/\\u{10FFFF}/',
            '/\\u{110000}/',
            '/\\u{00000001}/',
            '/\\377/',
            '/\\400/',
            '/\\^/',
            '/\\$/',
            '/\\./',
            '/\\+/',
            '/\\?/',
            '/\\(/',
            '/\\)/',
            '/\\[/',
            '/\\]/',
            '/\\{/',
            '/\\}/',
            '/\\|/',
            '/\\//',
            '/\\a/',
            '/\\s/',
            '/[]/',
            '/[^-a-b-]/',
            '/[-]/',
            '/[a]/',
            '/[--]/',
            '/[-a]/',
            '/[-a-]/',
            '/[a-]/',
            '/[a-b]/',
            '/[-a-b-]/',
            '/[---]/',
            '/[\\b-\\n]/',
            '/[b\\-a]/',
            '/[\\d]/',
            '/[\\D]/',
            '/[\\s]/',
            '/[\\S]/',
            '/[\\w]/',
            '/[\\W]/',
            '/[\\d]/',
            '/[\\D]/',
            '/[\\s]/',
            '/[\\S]/',
            '/[\\w]/',
            '/[\\W]/',
            '/[\\f]/',
            '/[\\n]/',
            '/[\\r]/',
            '/[\\t]/',
            '/[\\v]/',
            '/[\\cA]/',
            '/[\\cz]/',
            '/[\\c1]/',
            '/[\\c]/',
            '/[\\0]/',
            '/[\\x]/',
            '/[\\xz]/',
            '/[\\x1]/',
            '/[\\x12]/',
            '/[\\x123]/',
            '/[\\u]/',
            '/[\\u1]/',
            '/[\\u12]/',
            '/[\\u123]/',
            '/[\\u1234]/',
            '/[\\u12345]/',
            '/[\\u{]/',
            '/[\\u{z]/',
            '/[\\u{a}]/',
            '/[\\u{20]/',
            '/[\\u{20}]/',
            '/[\\u{10FFFF}]/',
            '/[\\u{110000}]/',
            '/[\\u{00000001}]/',
            '/[\\77]/',
            '/[\\377]/',
            '/[\\400]/',
            '/[\\^]/',
            '/[\\$]/',
            '/[\\.]/',
            '/[\\+]/',
            '/[\\?]/',
            '/[\\(]/',
            '/[\\)]/',
            '/[\\[]/',
            '/[\\]]/',
            '/[\\u]/',
            '/[\\u1]/',
            '/[\\u12]/',
            '/[\\u123]/',
            '/[\\u1234]/',
            '/[\\u12345]/',
            '/[\\u{]/',
            '/[\\u{z]/',
            '/[\\u{a}]/',
            '/[\\u{20]/',
            '/[\\u{20}]/',
            '/[\\u{10FFFF}]/',
            '/[\\u{110000}]/',
            '/[\\u{00000001}]/',
            '/[\\77]/',
            '/[\\377]/',
            '/[\\400]/',
            '/[\\^]/',
            '/[\\$]/',
            '/[\\.]/',
            '/[\\D-\\uFFFF]/',
            '/a*/',
            '/a+/',
            '/a?/',
            '/a{/',
            '/a{}/',
            '/a{a}/',
            '/a{1}/',
            '/a{1/',
            '/[\c0]/',
            '/[\c00]+/',
            '/[\c10]+/',
            '/\c8/',
            '/[\c80]+/',
            '/[\c_]/',
            '/\C/',
            '/7\89/',
            '/\9/',
            '/(?:a)/',
            '/a{1,2}/',
            '/\\?>|[\\n\\r\\t ][^?]*\\?+([^>?][^?]*\\?+)*>/',
            '/\\c\u0411/',
            '/\\c\u0412/',
            '/\\c\u0413/',
            '/^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/',
            '/^\d+$/',
            '/^-\d+$/',
            '/^-?\d+$/',
            '/^\d*\.?\d+$/',
            '/^-\d*\.?\d+$/',
            '/^-?\d*\.?\d+$/',
            '/\\p/u',
            '/^.(?<=a)/',
            '/^f\w\w(?<=\woo)/',
            '/(?<=a[a-z][a-z])\w\w\w/',
            '/(?<=[a|b|c]*)[^a|b|c]{3}/',
            '/(?<=^abc)def/',
            '/(?<=^[a-c]{3})def/',
            '/(?<=ab(?=c)\wd)\w\w/',
            '/(?<=a(?=([^a]{2})d)\w{3})\w\w/',
            '/(?<=a(?=([bc]{2}(?<!a{2}))d)\w{3})\w\w/',
            '/(?<=a(?=([bc]{2}(?<!a*))d)\w{3})\w\w/',
            '/(?=(\w))(?<=(\\1))./',
            '/(.)(?<=(\\1\\1))/',
            '/(.)(?<=(\\1\\1))/',
            '/^faaao?(?<=^f[oa]+(?=o))/',
            '/(.)(?<=(\\1\\1))/',
            '/(.)(?<=(\\1\\1))/',
            '/^foo(?<!foo)$/',
            '/^f.o(?<!foo)$/',
            '/(?<=(?:\\1b)(aa))./',
        ];

        for (const arg of invalidSyntax) {
            it(`${arg}`, () => {
                t.doesNotThrow(() => {
                    parseSource(`${arg}`, undefined, Context.Empty);
                });
            });
        }
    });
});
